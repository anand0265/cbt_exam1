[{"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\index.js":"1","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\App.js":"2","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reportWebVitals.js":"3","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\store.js":"4","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Header.jsx":"5","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Instruction.jsx":"6","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Register.jsx":"7","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Login.jsx":"8","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\QuestionCreate.jsx":"9","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\QuestionList.jsx":"10","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentRegistered.jsx":"11","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestCreate.jsx":"12","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\SupervisorList.jsx":"13","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestPaper.jsx":"14","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\SupervisorReqList.jsx":"15","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Snapshots.jsx":"16","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestConductedList.jsx":"17","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentResult.jsx":"18","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\EmailNotification.jsx":"19","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\HomeScreen.jsx":"20","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Audio.jsx":"21","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestNotConductedList.jsx":"22","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentUpcomingTest.jsx":"23","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\SupervisorGroup.jsx":"24","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentPrevTest.jsx":"25","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Profile.jsx":"26","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\GroupDetails.jsx":"27","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestSubmitted.jsx":"28","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentGroup.jsx":"29","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\DeleteMedia.jsx":"30","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentUpcomingAssignment.jsx":"31","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\AssignmentNotConducted.jsx":"32","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentPrevAssignment.jsx":"33","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\AssignmentConducted.jsx":"34","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\testReducer.jsx":"35","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\questionReducer.jsx":"36","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\userReducer.jsx":"37","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\groupReducer.jsx":"38","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\studentRegistrationReducer.jsx":"39","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\supervisorReducer.jsx":"40","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\generateResultReducer.jsx":"41","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\QuestionsTable.jsx":"42","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\TestTable.jsx":"43","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\StudentGroupTestTable.jsx":"44","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Tables.jsx":"45","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Group.jsx":"46","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\userAction.jsx":"47","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\studentRegistrationAction.jsx":"48","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\questionAction.jsx":"49","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\testAction.jsx":"50","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\supervisorAction.jsx":"51","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\groupAction.jsx":"52","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\audio.jsx":"53","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Timer.jsx":"54","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\responseSheetAction.jsx":"55","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\LineChart.jsx":"56","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\SearchBox.jsx":"57","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Loader.jsx":"58","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\generateResultConstant.jsx":"59","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\studentRegistrationConstant.jsx":"60","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\supervisorConstant.jsx":"61","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\groupConstant.jsx":"62","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\testConstant.jsx":"63","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\userConstanst.jsx":"64","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\questionConstant.jsx":"65","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\SingleQuestion.jsx":"66","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\generateResultAction.jsx":"67","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\snapshots.jsx":"68","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\SupervisorTable.jsx":"69","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\mediaConstant.jsx":"70","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Clock.jsx":"71","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\pageConstant.jsx":"72","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\paginate.jsx":"73","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Pagination.jsx":"74","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\QuestionPaper.jsx":"75","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\QuestionDetails.jsx":"76","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Statistics.jsx":"77","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\RankList.jsx":"78","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Trainees.jsx":"79","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\errorHandler.jsx":"80","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\httpService.jsx":"81","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Token.jsx":"82","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Color.jsx":"83","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\DoughnutChart.jsx":"84","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\BarCharts.jsx":"85","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentPageList.jsx":"86"},{"size":642,"mtime":1756571330621,"results":"87","hashOfConfig":"88"},{"size":4573,"mtime":1756588278522,"results":"89","hashOfConfig":"88"},{"size":364,"mtime":1756571330624,"results":"90","hashOfConfig":"88"},{"size":1717,"mtime":1756571330630,"results":"91","hashOfConfig":"88"},{"size":7557,"mtime":1756588299485,"results":"92","hashOfConfig":"88"},{"size":3406,"mtime":1756571330690,"results":"93","hashOfConfig":"88"},{"size":3192,"mtime":1756571330851,"results":"94","hashOfConfig":"88"},{"size":2013,"mtime":1756575329423,"results":"95","hashOfConfig":"88"},{"size":5224,"mtime":1756571330843,"results":"96","hashOfConfig":"88"},{"size":1695,"mtime":1756571330848,"results":"97","hashOfConfig":"88"},{"size":3985,"mtime":1756584793236,"results":"98","hashOfConfig":"88"},{"size":13187,"mtime":1756571330897,"results":"99","hashOfConfig":"88"},{"size":700,"mtime":1756571330886,"results":"100","hashOfConfig":"88"},{"size":12876,"mtime":1756571330906,"results":"101","hashOfConfig":"88"},{"size":723,"mtime":1756571330891,"results":"102","hashOfConfig":"88"},{"size":708,"mtime":1756571330855,"results":"103","hashOfConfig":"88"},{"size":1250,"mtime":1756571330893,"results":"104","hashOfConfig":"88"},{"size":5862,"mtime":1756571330872,"results":"105","hashOfConfig":"88"},{"size":252,"mtime":1756571330826,"results":"106","hashOfConfig":"88"},{"size":6482,"mtime":1756571330833,"results":"107","hashOfConfig":"88"},{"size":814,"mtime":1756571330817,"results":"108","hashOfConfig":"88"},{"size":1523,"mtime":1756571330901,"results":"109","hashOfConfig":"88"},{"size":1236,"mtime":1756571330880,"results":"110","hashOfConfig":"88"},{"size":3614,"mtime":1756571330883,"results":"111","hashOfConfig":"88"},{"size":1205,"mtime":1756571330866,"results":"112","hashOfConfig":"88"},{"size":3745,"mtime":1756571330839,"results":"113","hashOfConfig":"88"},{"size":6166,"mtime":1756571330829,"results":"114","hashOfConfig":"88"},{"size":254,"mtime":1756571330910,"results":"115","hashOfConfig":"88"},{"size":3149,"mtime":1756571330859,"results":"116","hashOfConfig":"88"},{"size":505,"mtime":1756571330822,"results":"117","hashOfConfig":"88"},{"size":1299,"mtime":1756571330876,"results":"118","hashOfConfig":"88"},{"size":1581,"mtime":1756571330814,"results":"119","hashOfConfig":"88"},{"size":1276,"mtime":1756571330861,"results":"120","hashOfConfig":"88"},{"size":1275,"mtime":1756571330811,"results":"121","hashOfConfig":"88"},{"size":1065,"mtime":1756571330799,"results":"122","hashOfConfig":"88"},{"size":510,"mtime":1756571330787,"results":"123","hashOfConfig":"88"},{"size":742,"mtime":1756571330802,"results":"124","hashOfConfig":"88"},{"size":469,"mtime":1756571330783,"results":"125","hashOfConfig":"88"},{"size":1541,"mtime":1756571330790,"results":"126","hashOfConfig":"88"},{"size":1239,"mtime":1756571330795,"results":"127","hashOfConfig":"88"},{"size":473,"mtime":1756571330780,"results":"128","hashOfConfig":"88"},{"size":5068,"mtime":1756571330700,"results":"129","hashOfConfig":"88"},{"size":9242,"mtime":1756597407610,"results":"130","hashOfConfig":"88"},{"size":2424,"mtime":1756571330716,"results":"131","hashOfConfig":"88"},{"size":1652,"mtime":1756571330724,"results":"132","hashOfConfig":"88"},{"size":1096,"mtime":1756571330682,"results":"133","hashOfConfig":"88"},{"size":1481,"mtime":1756590311525,"results":"134","hashOfConfig":"88"},{"size":3449,"mtime":1756571330659,"results":"135","hashOfConfig":"88"},{"size":1455,"mtime":1756580669031,"results":"136","hashOfConfig":"88"},{"size":5812,"mtime":1756571330665,"results":"137","hashOfConfig":"88"},{"size":2754,"mtime":1756571330662,"results":"138","hashOfConfig":"88"},{"size":1690,"mtime":1756571330644,"results":"139","hashOfConfig":"88"},{"size":684,"mtime":1756571330638,"results":"140","hashOfConfig":"88"},{"size":1138,"mtime":1756571330944,"results":"141","hashOfConfig":"88"},{"size":1673,"mtime":1756571330652,"results":"142","hashOfConfig":"88"},{"size":579,"mtime":1756571330933,"results":"143","hashOfConfig":"88"},{"size":399,"mtime":1756571330941,"results":"144","hashOfConfig":"88"},{"size":390,"mtime":1756571330936,"results":"145","hashOfConfig":"88"},{"size":192,"mtime":1756571330741,"results":"146","hashOfConfig":"88"},{"size":668,"mtime":1756571330758,"results":"147","hashOfConfig":"88"},{"size":638,"mtime":1756571330764,"results":"148","hashOfConfig":"88"},{"size":204,"mtime":1756571330745,"results":"149","hashOfConfig":"88"},{"size":405,"mtime":1756571330767,"results":"150","hashOfConfig":"88"},{"size":204,"mtime":1756571330771,"results":"151","hashOfConfig":"88"},{"size":238,"mtime":1756571330755,"results":"152","hashOfConfig":"88"},{"size":1574,"mtime":1756571330709,"results":"153","hashOfConfig":"88"},{"size":1782,"mtime":1756571330641,"results":"154","hashOfConfig":"88"},{"size":671,"mtime":1756571330655,"results":"155","hashOfConfig":"88"},{"size":2971,"mtime":1756571330721,"results":"156","hashOfConfig":"88"},{"size":111,"mtime":1756571330749,"results":"157","hashOfConfig":"88"},{"size":504,"mtime":1756571330679,"results":"158","hashOfConfig":"88"},{"size":29,"mtime":1756571330751,"results":"159","hashOfConfig":"88"},{"size":193,"mtime":1756571330954,"results":"160","hashOfConfig":"88"},{"size":752,"mtime":1756571330939,"results":"161","hashOfConfig":"88"},{"size":2706,"mtime":1756571330697,"results":"162","hashOfConfig":"88"},{"size":2196,"mtime":1756571330693,"results":"163","hashOfConfig":"88"},{"size":5394,"mtime":1756571330713,"results":"164","hashOfConfig":"88"},{"size":1559,"mtime":1756571330704,"results":"165","hashOfConfig":"88"},{"size":7880,"mtime":1756571330730,"results":"166","hashOfConfig":"88"},{"size":220,"mtime":1756571330614,"results":"167","hashOfConfig":"88"},{"size":1188,"mtime":1756599711832,"results":"168","hashOfConfig":"88"},{"size":212,"mtime":1756571330947,"results":"169","hashOfConfig":"88"},{"size":3468,"mtime":1756571330924,"results":"170","hashOfConfig":"88"},{"size":318,"mtime":1756571330928,"results":"171","hashOfConfig":"88"},{"size":1011,"mtime":1756571330922,"results":"172","hashOfConfig":"88"},{"size":3158,"mtime":1756598870668,"results":"173","hashOfConfig":"88"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"1yg46x8",{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"176"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"176"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"176"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"176"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"176"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"176"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"176"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"176"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"176"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"176"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"176"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"176"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"176"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"176"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"176"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"176"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"176"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"176"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"176"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"176"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"176"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"176"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"176"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"176"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"176"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"176"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"176"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"176"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"176"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"176"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"176"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"176"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"176"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\index.js",[],["382","383"],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\App.js",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reportWebVitals.js",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\store.js",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Header.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Instruction.jsx",["384"],"import React, { useState, useEffect } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { checkTestStart, startTestTime } from '../actions/testAction';\nimport Timer from '../utils/Timer';\n\nconst Instruction = ({ history }) => {\n  const query = new URLSearchParams(useLocation().search);\n  const testId = query.get('testid');\n  const studentId = query.get('studentid');\n\n  const { userInfo } = useSelector(state => state.userLogin);\n\n  const [show, setShow] = useState();\n  const [testTime, setTestTime] = useState(null);\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\n        `/login?redirect=student/test?testid=${testId}&studentid=${studentId}`\n      );\n    } else getTestTime();\n\n    async function getTestTime() {\n      const time = await startTestTime(testId);\n      if (time) setTestTime(time.startTime);\n      else getTestTime();\n    }\n  }, []);\n\n  const submitHandler = async id => {\n    const start = await checkTestStart(testId);\n    //console.log(start);\n    if (start) {\n      history.push(\n        `/student/test/start?testId=${testId}&studentId=${studentId}`\n      );\n    } else {\n      setShow(true);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"instaruction-page-wrapper\">\n        <div>\n          <div className=\"clock\">\n            <h3>Time Left</h3>\n            <div className=\"stopwatch-card\">\n              <p>\n                {testTime && (\n                  <Timer\n                    time={testTime}\n                    duration={-1}\n                    testId={testId}\n                    endTest={submitHandler}\n                  />\n                )}\n              </p>\n            </div>\n          </div>\n          <div className=\"instruction-page-inner\">\n            <h2>General Instructions:</h2>\n            <h4>1. All questions are compulsory.</h4>\n            <h4>2. You can bookmark any question.</h4>\n            <h4>\n              3. Before Update the answer firstly UnCheck the previous answer\n              and then updated it.\n            </h4>\n            <h4>\n              4. This test is time bound,there's a timer on the right panel.\n            </h4>\n            <h4>\n              5. Click on 'End Test' button to submit test before time limit.{' '}\n            </h4>\n            <h4>\n              6. The test will be automatically submitted when the clock reads\n              0:0.\n            </h4>\n            <h4>\n              <b>NOTE :</b>To save answers,click on the 'Save & Next' button.\n            </h4>\n            <div className=\"proceed-to-test-button\">\n              <Button\n                style={{ float: 'right' }}\n                variant=\"outline-primary\"\n                icon=\"caret-right\"\n                onClick={() => submitHandler()}\n              >\n                Proceed To Test\n              </Button>\n            </div>\n          </div>\n        </div>\n        <Modal\n          show={show}\n          onHide={() => setShow(false)}\n          aria-labelledby=\"example-custom-modal-styling-title\"\n          variant=\"success\"\n        >\n          <Modal.Body>\n            <div className=\"justify-content-centre\">\n              <p style={{ marginLeft: '80px' }}>Test is not started Yet</p>\n            </div>\n          </Modal.Body>\n        </Modal>\n      </div>\n    </>\n  );\n};\n\nexport default Instruction;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Register.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Login.jsx",["385"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Container, Button, Form, Row, Col } from 'react-bootstrap';\nimport { login } from '../actions/userAction';\n\nconst Login = ({ history }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const { userInfo } = useSelector(state => state.userLogin);\n  const location = useLocation();\n  const redirect = location.search ? location.search.slice(10, 89) : '/';\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (userInfo) {\n      history.push(redirect);\n    }\n  }, [userInfo, history]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(login(email, password));\n  };\n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center my-5\">\n        <Col sx={12} md={6}>\n          <h2>SIGN IN</h2>\n          <Form onSubmit={submitHandler}>\n            <Form.Group controlId=\"email\">\n              <Form.Label>Email Address</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter Email Address\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Button type=\"submit\" variant=\"primary\">\n              Login\n            </Button>\n\n            <Row className=\"py-3 px-3\">\n              NEW USER ? &nbsp;&nbsp; <Link to=\"/register\">REGISTER</Link>\n            </Row>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Login;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\QuestionCreate.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\QuestionList.jsx",["386"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Col, Button, Container, Row } from 'react-bootstrap';\nimport { getAllQuestions } from '../actions/questionAction';\nimport Loader from '../utils/Loader';\nimport SearchBox from '../utils/SearchBox';\nimport QuestionsTable from '../component/QuestionsTable';\n\nconst QuestionList = ({ history }) => {\n  const { loading, questions } = useSelector(state => state.questionList);\n  const { userInfo } = useSelector(state => state.userLogin);\n  const [query, setQuery] = useState('');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    }\n\n    if (!questions) {\n      dispatch(getAllQuestions());\n    }\n  }, []);\n\n  const createHandler = () => {\n    history.push('/questions/create');\n  };\n\n  const changeHandler = e => {\n    e.preventDefault();\n    setQuery(e.target.value);\n  };\n\n  const results = !query\n    ? questions\n    : questions.filter(q =>\n        q.subject.toLowerCase().includes(query.toLocaleLowerCase())\n      );\n\n  return (\n    <>\n      {loading && <Loader />}\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col>\n            <h3 style={{ color: 'black' }}>All Questions</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button className=\"my-3\" onClick={createHandler}>\n              <i className=\"fas fa-plus\"></i>&nbsp;&nbsp;Add New Question\n            </Button>\n          </Col>\n        </Row>\n\n        <SearchBox changeHandler={changeHandler} />\n        <QuestionsTable questions={results} />\n      </Container>\n    </>\n  );\n};\n\nexport default QuestionList;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentRegistered.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestCreate.jsx",["387","388"],"import React, { useState, useEffect } from 'react';\nimport {\n  Form,\n  Container,\n  Button,\n  Row,\n  Col,\n  Modal,\n  ListGroup,\n} from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport DatePicker from 'react-datepicker';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllQuestions } from '../actions/questionAction';\nimport { createTest, getTestDetails } from '../actions/testAction';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport SearchBox from '../utils/SearchBox';\nimport { getAllGroup } from '../actions/groupAction';\n\nconst TestCreate = ({ history }) => {\n  const [show, setShow] = useState(false);\n  const [_id, setID] = useState(null);\n  const [title, setTitle] = useState('');\n  const [subject, setSubject] = useState('');\n  const [duration, setDuration] = useState('');\n  const [maxMarks, setMaxMarks] = useState(0);\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\n  const [isSnapshots, setSnapshots] = useState(false);\n  const [isAudioRec, setAudioRec] = useState(false);\n  const [startTime, setStartTime] = useState(new Date());\n  let [endTime, setEndTime] = useState(new Date());\n  const [query, setQuery] = useState('');\n  const [category, setCategory] = useState('');\n  const [paperType, setPaperType] = useState(''); //New field Added\n  const [groupId, setGroupId] = useState(''); //New field Added\n  const [selectedFile, setSelectedFile] = useState('upload pdf');\n\n  const { questions } = useSelector(state => state.questionList);\n\n  const [pdf, setPdf] = useState(null);\n\n  const { testPapers } = useSelector(state => state.getTestPaper);\n\n  const { groups } = useSelector(state => state.groupList);\n\n  const dispatch = useDispatch();\n\n  const { testId } = useParams();\n  useEffect(() => {\n    if (!questions) {\n      dispatch(getAllQuestions());\n    }\n\n    if (!groups) dispatch(getAllGroup());\n\n    async function getPaper() {\n      const paper = await getTestDetails(testId);\n      if (paper) {\n        setTitle(paper.title);\n        setSubject(paper.subject);\n        setDuration(paper.duration);\n        setSelectedQuestions(paper.questions);\n        setSnapshots(paper.isSnapshots);\n        setAudioRec(paper.isAudioRec);\n        setPaperType(paper.paperType);\n        setCategory(paper.category);\n        setID(paper._id);\n        setMaxMarks(paper.maxMarks);\n      }\n    }\n\n    if (testId) getPaper();\n  }, []);\n\n  const submitQuestionHandler = (e, w) => {\n    let marks = maxMarks;\n    let arr = [...selectedQuestions];\n\n    if (e.target.checked) {\n      arr.push(e.target.value);\n      marks = marks + w;\n    } else {\n      marks = marks - w;\n      arr = arr.filter(a => a !== e.target.value);\n    }\n\n    setMaxMarks(marks);\n    setSelectedQuestions(arr);\n  };\n\n  const modalOpenHandler = () => {\n    setShow(true);\n    setQuery('');\n  };\n\n  const changeHandler = e => {\n    e.preventDefault();\n    setQuery(e.target.value);\n  };\n\n  const ques = !query\n    ? questions\n    : questions.filter(q =>\n        q.subject.toLowerCase().includes(query.toLocaleLowerCase())\n      );\n  const fileInputHandler = event => {\n    setSelectedFile(event.target.files[0].name);\n    const file = event.target.files[0];\n    let reader = new FileReader();\n    reader.onload = function () {\n      setPdf(reader.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    startTime.setMilliseconds(0);\n    startTime.setSeconds(0);\n\n    if (paperType !== 'ORGANISATION' && groupId === '') {\n      window.alert('Please select group');\n    } else {\n      dispatch(\n        createTest({\n          _id,\n          title,\n          category,\n          pdf,\n          subject,\n          duration,\n          selectedQuestions,\n          isSnapshots,\n          isAudioRec,\n          startTime,\n          groupId,\n          maxMarks,\n          paperType,\n        })\n      );\n\n      if (paperType === 'ASSIGNMENT') history.push('/assignment/notConducted');\n      else history.push('/tests/notConducted');\n    }\n  };\n\n  const endTimeHandler = endDate => {\n    setEndTime(endDate);\n    startTime.setMilliseconds(0);\n    startTime.setSeconds(0);\n    endDate.setMilliseconds(0);\n    endDate.setSeconds(0);\n    const d = (endDate - startTime) / 60000;\n    setDuration(d);\n  };\n\n  return (\n    <>\n      <Container className=\"my-5\">\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId=\"PaperType\">\n            <Form.Label>PaperType</Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={paperType}\n              onChange={e => setPaperType(e.target.value)}\n            >\n              <option value=\"\">Select Paper-Type</option>\n              <option value=\"ORGANISATION\">Organisation</option>\n              <option value=\"GROUP\">Group Test</option>\n              <option value=\"ASSIGNMENT\">Assignment</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"category\">\n            <Form.Label>Category</Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={category}\n              onChange={e => setCategory(e.target.value)}\n            >\n              <option value=\"\">Select Category</option>\n              <option value=\"MCQ\">MCQ</option>\n              <option value=\"PDF\">Subjective(pdf)</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"group\">\n            <Form.Label>Group</Form.Label>\n            <Form.Control\n              as=\"select\"\n              disabled={paperType === '' || paperType === 'ORGANISATION'}\n              value={groupId}\n              onChange={e => setGroupId(e.target.value)}\n            >\n              <option value=\"\">Select Group</option>\n              {groups &&\n                groups.map(g => (\n                  <option key={g._id} value={g._id}>\n                    {g.groupName}\n                  </option>\n                ))}\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"title\">\n            <Form.Label>\n              <i className=\"fas fa-pen\"></i> Title\n            </Form.Label>\n            <Form.Control\n              required\n              placeholder=\"Title...\"\n              type=\"text\"\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n            />\n          </Form.Group>\n\n          <Form.Row>\n            <Form.Group as={Col} md={4} controlId=\"subject\">\n              <Form.Label>\n                <i className=\"fas fa-book\"></i> Subject\n              </Form.Label>\n              <Form.Control\n                required\n                type=\"text\"\n                placeholder=\"Subject\"\n                value={subject}\n                onChange={e => setSubject(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group as={Col} md={2} controlId=\"duration\">\n              <Form.Label>\n                <i className=\"fa fa-clock-o\"></i> Duration\n              </Form.Label>\n              <Form.Control\n                required\n                disabled={paperType === '' || paperType === 'ASSIGNMENT'}\n                type=\"number\"\n                min=\"0\"\n                placeholder=\"Select..\"\n                value={duration}\n                aria-describedby=\"durationInMinute\"\n                onChange={e => setDuration(e.target.value)}\n              />\n              <Form.Text id=\"durationInMinute\" muted>\n                Duration must be filled in term of minutes\n              </Form.Text>\n            </Form.Group>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <Form.Group>\n              <Form.Label>\n                <i className=\"fa fa-calendar\"></i> Start Time\n              </Form.Label>\n              <br />\n              <DatePicker\n                selected={startTime}\n                onChange={date => setStartTime(date)}\n                timeInputLabel=\"Time:\"\n                dateFormat=\"MM/dd/yyyy h:mm aa\"\n                showTimeInput\n              />\n            </Form.Group>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            {paperType === 'ASSIGNMENT' && (\n              <Form.Group>\n                <Form.Label>\n                  <i className=\"fa fa-calendar\"></i> End Time\n                </Form.Label>\n                <br />\n                <DatePicker\n                  selected={endTime}\n                  onChange={date => endTimeHandler(date)}\n                  timeInputLabel=\"Time:\"\n                  dateFormat=\"MM/dd/yyyy h:mm aa\"\n                  showTimeInput\n                />\n              </Form.Group>\n            )}\n          </Form.Row>\n          {category === 'PDF' && (\n            <Form.Group controlId=\"maxmarks\">\n              <Form.Label>Max Marks</Form.Label>\n              <Form.Control\n                required\n                type=\"number\"\n                min=\"0\"\n                placeholder=\"Select..\"\n                value={maxMarks}\n                aria-describedby=\"durationInMinute\"\n                onChange={e => setMaxMarks(e.target.value)}\n              />\n            </Form.Group>\n          )}\n          <Form.Check\n            type=\"switch\"\n            id=\"custom-switch\"\n            label=\"Enable WebCam\"\n            checked={isSnapshots}\n            disabled={paperType === '' || paperType === 'ASSIGNMENT'}\n            onChange={() => setSnapshots(!isSnapshots)}\n          />\n\n          <Form.Check\n            type=\"switch\"\n            id=\"audio-switch\"\n            label=\"Enable Audio Recording\"\n            checked={isAudioRec}\n            disabled={paperType === '' || paperType === 'ASSIGNMENT'}\n            onChange={() => setAudioRec(!isAudioRec)}\n          />\n\n          <br />\n\n          {category === 'MCQ' ? (\n            <Button\n              variant=\"outline-primary\"\n              className=\"btn btn-block\"\n              onClick={() => modalOpenHandler()}\n            >\n              Select Question\n            </Button>\n          ) : (\n            <Form.File\n              id=\"custom-file\"\n              label={selectedFile}\n              onChange={e => fileInputHandler(e)}\n              style={{ width: '50%' }}\n              custom\n            />\n          )}\n          <br />\n          <br />\n          <Button\n            variant=\"outline-primary\"\n            type=\"submit\"\n            disabled={\n              selectedQuestions.length || category === 'PDF' ? false : true\n            }\n          >\n            Submit\n          </Button>\n        </Form>\n      </Container>\n      <Modal\n        show={show}\n        onHide={() => setShow(false)}\n        dialogClassName=\"my-modal\"\n        aria-labelledby=\"example-custom-modal-styling-title\"\n      >\n        <Modal.Header closeButton>\n          <SearchBox changeHandler={changeHandler} />\n        </Modal.Header>\n        <Modal.Body>\n          <ListGroup>\n            {ques &&\n              ques.map((question, index) => (\n                <ListGroup.Item key={index}>\n                  <Row>\n                    <Col md={0.6}>\n                      <strong>{index + 1}: </strong>\n                    </Col>\n                    <Col>\n                      <Row>\n                        <Col xs={2}>\n                          <strong>Subject: </strong>\n                        </Col>\n                        <Col>{question.subject}</Col>\n                      </Row>\n                      <Row>\n                        <Col xs={2}>\n                          <strong>Weightage: </strong>\n                        </Col>\n                        <Col>{question.weightage}</Col>\n                      </Row>\n                      <Row>\n                        <Col xs={2}>\n                          <strong>Question: </strong>\n                        </Col>\n                        <Col>{question.questionBody}</Col>\n                      </Row>\n                      <Row>\n                        <Col xs={2}>\n                          <strong>Options: </strong>\n                        </Col>\n                        <Col>\n                          {question.options.map((opt, index) => (\n                            <React.Fragment key={index}>\n                              <strong>{index + 1}: </strong>\n                              {opt.optionBody}\n                              <br />\n                            </React.Fragment>\n                          ))}\n                        </Col>\n                      </Row>\n                      <Form.Check\n                        type=\"checkbox\"\n                        value={question._id}\n                        checked={\n                          selectedQuestions.filter(\n                            ques => ques === question._id\n                          ).length\n                            ? true\n                            : false\n                        }\n                        onChange={e =>\n                          submitQuestionHandler(e, question.weightage)\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n              ))}\n          </ListGroup>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default TestCreate;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\SupervisorList.jsx",["389"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { supervisorList } from '../actions/supervisorAction';\nimport Loader from '../utils/Loader';\nimport SupervisorTable from '../component/SupervisorTable';\n\nconst SupervisorList = () => {\n  const { loading, supervisors } = useSelector(state => state.supervisorList);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!supervisors) {\n      dispatch(supervisorList());\n    }\n  }, []);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {supervisors && (\n        <SupervisorTable supervisors={supervisors} permission={true} />\n      )}\n    </>\n  );\n};\n\nexport default SupervisorList;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestPaper.jsx",["390","391","392","393","394","395","396","397"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Button, Container, Form, ListGroup, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport Webcam from \"react-webcam\";\nimport { ReactMic } from \"react-mic\";\nimport {\n  responseSheetOfStudent,\n  addAnswerForGivenQuestion,\n} from \"../actions/responseSheetAction\";\nimport {\n  getSinglePaper,\n  getTestCategory,\n  testEnd,\n} from \"../actions/testAction\";\nimport Clock from \"../component/Clock\";\nimport { uploadImage } from \"./../actions/snapshots\";\nimport { uploadAudio } from \"./../actions/audio\";\n//import { getTestPdf } from \"./../actions/testAction\";\nimport download from \"downloadjs\";\nimport { uploadPdf } from \"./../actions/responseSheetAction\";\nimport { resultGeneratePdf } from \"./../actions/generateResultAction\";\nimport {\n  snapInterval,\n  audioRecLength,\n  audioRecInterval,\n} from \"./../constants/mediaConstant\";\n\nconst TestPaper = ({ history }) => {\n  const query = new URLSearchParams(useLocation().search);\n  const testId = query.get(\"testId\");\n  const studentId = query.get(\"studentId\");\n  const webcamRef = useRef(null);\n  const webcamRef2 = useRef(null);\n  let intervalId = useRef(null);\n  let intervalId2 = useRef(null);\n  let audioIntervalId = useRef(null);\n  const [answer, setAnswer] = useState([]);\n  const [saveAnswer, setSaveAnswer] = useState([]);\n  const [questionNumber, setQuestionNumber] = useState(1);\n  const [record, setRecord] = useState(false);\n\n  let { paper } = useSelector((state) => state.singleTestPaper);\n\n  const [flag, setFlag] = useState(true);\n\n  const [selectedFile, setSelectedFile] = useState(\"upload pdf\");\n  const [responsePdf, setResponsePdf] = useState(null);\n  // const [testCategory, setTestCategory] = useState(\"\");\n  const pdf = useRef(null);\n  const testCategory = useRef(\"\");\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    window.dispatchEvent(new CustomEvent(\"navigationhandler\"));\n    if (!paper || paper._id !== testId) {\n      // let category;\n      // async function getCategory() {\n      //   testCategory.current = await getTestCategory(testId);\n      //   //  console.log(category);\n      //   // setTestCategory(category);\n      // }\n      // getCategory();\n      dispatch(getSinglePaper(testId));\n      dispatch({ type: \"SET_URL\", payload: window.location.pathname });\n    }\n\n    async function responseSheet() {\n      const res = await responseSheetOfStudent({ testId, studentId });\n      //automatic fills option after reloading\n      if (typeof res !== \"string\" && res.responses !== null) {\n        let response = res && res.responses.map((r) => [...r.chosenOption]);\n        response = [].concat(...response);\n        setSaveAnswer(response);\n      }\n    }\n\n    responseSheet();\n  }, []);\n  useEffect(() => {\n    if (paper && paper._id === testId) {\n      if (paper && paper.isSnapshots === true) {\n        checkCameraPerm();\n        intervalId.current = setInterval(async function () {\n          const image = webcamRef.current.getScreenshot({\n            height: 420,\n            width: 480,\n          });\n          if (image) await uploadImage(testId, studentId, image);\n\n          //console.log(intervalId);\n          // console.log(image);\n        }, snapInterval);\n        // intervalId2.current = setInterval(function () {\n        //   const img = webcamRef2.current.getScreenshot();\n        //   if (img) {\n        //     clearInterval(intervalId2.current);\n        //   } else {\n        //     window.alert(\"Allow permission to camera\");\n        //     //console.log(\"allow permission to camer\");\n        //   }\n        //   console.log(\"checking\", img);\n        // }, 5000);\n      }\n      if (paper && paper.isAudioRec === true) {\n        checkMicPerm();\n        audioIntervalId.current = setInterval(function () {\n          setRecord(true);\n          setTimeout(function () {\n            setRecord(false);\n          }, audioRecLength);\n        }, audioRecInterval);\n      }\n    }\n  }, [paper]);\n\n  const submitOptionHandler = (e) => {\n    let arr = [...answer];\n\n    if (e.target.checked) {\n      arr.push(e.target.value);\n    } else {\n      arr = arr.filter((a) => a !== e.target.value);\n    }\n\n    setAnswer(arr);\n\n    if (!e.target.checked) {\n      let temp = [...saveAnswer];\n      temp = temp.filter((t) => t !== e.target.value);\n      setSaveAnswer(temp);\n    }\n  };\n  const totalCount = paper && paper.questions.length;\n  const arr = [];\n  for (var i = 0; i < totalCount; i++) arr.push(i + 1);\n  const checkMicPerm = () => {\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        console.log(\"success!\");\n      })\n      .catch((e) => {\n        setFlag(false);\n        window.alert(\"Allow Mic permission\");\n        setTimeout(function () {\n          checkMicPerm();\n        }, 5000);\n      });\n  };\n\n  const checkCameraPerm = () => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true })\n      .then((stream) => {\n        console.log(\"success!\");\n      })\n      .catch((e) => {\n        setFlag(false);\n        window.alert(\"Allow Camera permission\");\n        setTimeout(function () {\n          checkCameraPerm();\n        }, 5000);\n      });\n  };\n\n  const resetAnswerHandler = () => {\n    setAnswer([]);\n    if (questionNumber !== totalCount) setQuestionNumber(questionNumber + 1);\n  };\n\n  const submitHandler = async () => {\n    const temp = [...answer];\n    for (var i = 0; i < answer.length; i++) saveAnswer.push(answer[i]);\n    setSaveAnswer(saveAnswer);\n\n    //console.log(answer);\n    await addAnswerForGivenQuestion({\n      testId,\n      studentId,\n      chosenOption: answer,\n      questionId: paper.questions[questionNumber - 1]._id,\n    });\n    resetAnswerHandler();\n  };\n\n  const testSubmitHandler = async (id) => {\n    clearInterval(intervalId.current);\n    //clearInterval(intervalId2.current);\n    clearInterval(audioIntervalId.current);\n    await testEnd({ testId, studentId });\n\n    if (paper.category === \"MCQ\") {\n      // history.push(\n      //   `/student/test/result?testId=${testId}&studentId=${studentId}`\n      // );\n      history.push(`/student/test/submitted`);\n    } else {\n      //await resultGeneratePdf(testId, studentId);\n      //console.log(paper.category);\n      history.push(`/student/test/submitted`);\n    }\n  };\n\n  const downloadPdf = () => {\n    //console.log(paper.pdf);\n    download(paper.pdf, \"Testpaper.pdf\", \"application/pdf\");\n  };\n\n  function onStop(recordedBlob) {\n    // console.log(\"recordedBlob is: \", recordedBlob);\n    const reader = new FileReader();\n    reader.readAsDataURL(recordedBlob.blob);\n    reader.onloadend = async function () {\n      const base64String = reader.result;\n      //      console.log(\"Base64 String - \", base64String);\n      await uploadAudio(testId, studentId, base64String);\n    };\n  }\n  const fileInputHandler = (event) => {\n    setSelectedFile(event.target.files[0].name);\n    const file = event.target.files[0];\n    let reader = new FileReader();\n    reader.onload = function () {\n      setResponsePdf(reader.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const uploadPdfHandler = async () => {\n    await uploadPdf(testId, studentId, responsePdf);\n    await resultGeneratePdf(testId, studentId);\n  };\n\n  return (\n    <div style={{ marginLeft: \"100px\", marginTop: \"80px\", padding: \"20px\" }}>\n      {paper && paper.isAudioRec && (\n        <div style={{ display: \"none\" }}>\n          <ReactMic record={record} onStop={onStop} />\n        </div>\n      )}\n      {paper && paper.isSnapshots && paper._id === testId && (\n        <>\n          <Webcam\n            audio={false}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n            screenshotQuality={0.3}\n            width={0}\n          />\n          {/* <Webcam\n            audio={false}\n            ref={webcamRef2}\n            screenshotFormat=\"image/jpeg\"\n            screenshotQuality={0.3}\n            width={0}\n          /> */}\n        </>\n      )}\n      <Row>\n        <Col md={8}>\n          {flag &&\n            paper &&\n            // testCategory.current.length > 1 &&\n            paper.category === \"MCQ\" && (\n              <Container>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <h4>QUESTION: {questionNumber}</h4>\n                    <p style={{ fontSize: \"20px\" }}>\n                      {paper.questions[questionNumber - 1].questionBody}\n                    </p>\n                  </ListGroup.Item>\n                  <ListGroup.Item>\n                    <h4 style={{ textAlign: \"left\" }}>\n                      <strong>Options:</strong>\n                    </h4>\n\n                    {paper.questions[questionNumber - 1].options.map((opt) => (\n                      <p style={{ fontSize: \"20px\" }} key={opt._id}>\n                        <Form.Check\n                          type=\"checkbox\"\n                          value={opt._id}\n                          label={opt.optionBody}\n                          checked={\n                            saveAnswer.filter((ans) => ans === opt._id).length\n                              ? true\n                              : answer.filter((a) => a === opt._id).length\n                              ? true\n                              : false\n                          }\n                          onChange={(e) => submitOptionHandler(e)}\n                        />\n                      </p>\n                    ))}\n                  </ListGroup.Item>\n                  <br />\n                  <br />\n                </ListGroup>\n                <Button\n                  variant=\"outline-primary\"\n                  onClick={() => setQuestionNumber(questionNumber - 1)}\n                  disabled={questionNumber === 1}\n                >\n                  Prev\n                </Button>{\" \"}\n                <Button\n                  variant=\"outline-primary\"\n                  onClick={() => resetAnswerHandler()}\n                  disabled={questionNumber === totalCount}\n                >\n                  Next\n                </Button>{\" \"}\n                <Button\n                  variant=\"outline-primary\"\n                  onClick={() => submitHandler()}\n                  disabled={\n                    questionNumber - 1 === totalCount || answer.length === 0\n                  }\n                >\n                  Save & Next\n                </Button>\n              </Container>\n            )}\n          {flag && paper && paper.category === \"PDF\" && (\n            <Container>\n              <ListGroup.Item style={{ margin: \"20px\" }}>\n                <h3 style={{ color: \"black\" }}> Test Paper:</h3>\n                <Button\n                  variant=\"outline-primary\"\n                  className=\"btn-block\"\n                  onClick={() => downloadPdf()}\n                >\n                  Download\n                </Button>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Form>\n                  <Form.File\n                    id=\"custom-file\"\n                    label={selectedFile}\n                    onChange={(e) => fileInputHandler(e)}\n                    custom\n                  />\n                </Form>\n                <br />\n\n                <Button\n                  variant=\"outline-primary\"\n                  type=\"submit\"\n                  className=\"btn-block\"\n                  onClick={uploadPdfHandler}\n                  // disabled={\n                  //   selectedQuestions.length || category === \"PDF\" ? false : true\n                  // }\n                >\n                  Submit\n                </Button>\n              </ListGroup.Item>\n            </Container>\n          )}\n        </Col>\n\n        <Col md={3.5}>\n          <Row style={{ marginTop: \"-100px\" }}>\n            {paper && (\n              <Clock\n                testId={paper._id}\n                time={paper.startTime}\n                duration={paper.duration}\n                endTest={testSubmitHandler}\n              />\n            )}\n          </Row>\n          <Row>\n            <Button\n              variant=\"outline-primary\"\n              style={{ marginLeft: \"180px\", marginTop: \"10px\" }}\n              onClick={() => testSubmitHandler()}\n            >\n              End Test\n            </Button>\n          </Row>\n          <Row style={{ position: \"center\" }}>\n            {arr &&\n              arr.map((a, index) => (\n                <div\n                  key={index}\n                  className=\"box\"\n                  style={{\n                    backgroundColor: `${\n                      questionNumber === a ? \"green\" : \"lightblue\"\n                    }`,\n                  }}\n                >\n                  {a}\n                </div>\n              ))}\n          </Row>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default TestPaper;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\SupervisorReqList.jsx",["398"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { supervisorReqList } from '../actions/supervisorAction';\nimport Loader from '../utils/Loader';\nimport SupervisorTable from '../component/SupervisorTable';\n\nconst SupervisorReqList = () => {\n  const { loading, supervisors } = useSelector(\n    state => state.supervisorReqList\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!supervisors) {\n      dispatch(supervisorReqList());\n    }\n  }, []);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {supervisors && (\n        <SupervisorTable supervisors={supervisors} permission={false} />\n      )}\n    </>\n  );\n};\n\nexport default SupervisorReqList;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Snapshots.jsx",["399","400"],"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getAllImages } from '../actions/snapshots';\n\nconst Snapshots = () => {\n  const query = new URLSearchParams(useLocation().search);\n  const testId = query.get('testId');\n  const studentId = query.get('studentId');\n  const [imgSrc, setImgSrc] = useState([]);\n  useEffect(() => {\n    async function getImg() {\n      const images = await getAllImages(testId, studentId);\n      setImgSrc(images);\n    }\n    getImg();\n  }, []);\n\n  return (\n    <div style={{ margin: '5px', textAlign: 'center' }}>\n      {imgSrc && imgSrc.map((i, j) => <img src={i} key={j} />)}\n    </div>\n  );\n};\nexport default Snapshots;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestConductedList.jsx",["401"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Row, Col, Button, Container } from 'react-bootstrap';\nimport { getConductedTestPaper } from '../actions/testAction';\nimport TestTable from '../component/TestTable';\nimport Loader from '../utils/Loader';\n\nconst TestConductedList = () => {\n  const { loading, conductedTestPapers } = useSelector(\n    state => state.getTestPaper\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!conductedTestPapers) {\n      dispatch(getConductedTestPaper());\n    }\n  }, []);\n  return (\n    <>\n      {loading && <Loader />}\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col>\n            <h3 style={{ color: 'black' }}>All Tests</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              onClick={() => dispatch(getConductedTestPaper())}\n              className=\"my-3\"\n              variant=\"outline-primary\"\n            >\n              <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\n            </Button>\n          </Col>\n        </Row>\n        <TestTable testPapers={conductedTestPapers} isShow={false} />\n      </Container>\n    </>\n  );\n};\n\nexport default TestConductedList;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentResult.jsx",["402","403"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { Row, Container, Col, Table, ListGroup, Button } from 'react-bootstrap';\nimport { resultGenerate } from '../actions/generateResultAction';\nimport { getStudentDetail } from '../actions/studentRegistrationAction';\nimport { getSinglePaper } from '../actions/testAction';\nimport Loader from '../utils/Loader';\nimport SingleQuestion from '../component/SingleQuestion';\nimport download from 'downloadjs';\nimport { getResponsePdf } from '../actions/responseSheetAction';\n\nconst StudentResult = () => {\n  const query = new URLSearchParams(useLocation().search);\n  const testId = query.get('testId');\n  const studentId = query.get('studentId');\n\n  const [show, setShow] = useState(false);\n  const [pos, setIndex] = useState(0);\n\n  const { loading, result, error } = useSelector(state => state.generateResult);\n  const { student } = useSelector(state => state.studentDetail);\n\n  const { paper } = useSelector(state => state.singleTestPaper);\n  const questions = paper && paper.questions;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    window.dispatchEvent(new CustomEvent('navigationhandler'));\n    if (!paper || testId !== paper._id) dispatch(getSinglePaper(testId));\n    if (!student || studentId !== student._id)\n      dispatch(getStudentDetail(studentId));\n    if (!result || studentId !== result.studentId || paper._id !== testId)\n      dispatch(resultGenerate({ testId, studentId }));\n  }, []);\n\n  const set = index => {\n    setShow(true);\n    setIndex(index);\n  };\n  const downloadQuestionPaper = () => {\n    //console.log(paper.pdf);\n    download(paper.pdf, 'Testpaper.pdf', 'application/pdf');\n  };\n  const downloadResponseSheet = async () => {\n    const pdf = await getResponsePdf(student._id, paper._id);\n    download(pdf, `responsesheet.pdf`, 'application/pdf');\n  };\n  return (\n    <Container>\n      {loading && <Loader />}\n      <Row>\n        <Col className=\"align-items-left\">\n          <h3 style={{ color: 'black' }}>STUDENT RESULT</h3>\n        </Col>\n      </Row>\n      {student && (\n        <Table responsive className=\"my-2\">\n          <tbody>\n            <tr>\n              <td>\n                <strong>NAME </strong>\n              </td>\n              <td>{student.name.toUpperCase()}</td>\n            </tr>\n            <tr>\n              <td>\n                <strong>EMAIL </strong>\n              </td>\n              <td>{student.email}</td>\n            </tr>\n\n            <tr>\n              <td>\n                <strong>MARKS(out of {paper && paper.maxMarks})</strong>\n              </td>\n              <td>\n                {result === 'Not Attempt' && 'Not Attempt'}\n                {result && result.score === -1 && 'Not Checked'}\n                {result && result.score !== -1 && result.score}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      )}\n      {result === 'Not Attempt' && (\n        <div className=\"reasendmail-container-register\">\n          Student has not given the test\n        </div>\n      )}\n      {result !== 'Not Attempt' && paper && paper.category === 'PDF' && (\n        <>\n          <ListGroup.Item style={{ margin: '20px' }}>\n            <h3 style={{ color: 'black' }}> Test Paper:</h3>\n            <Button\n              variant=\"outline-primary\"\n              className=\"btn-block\"\n              onClick={() => downloadQuestionPaper()}\n            >\n              Download\n            </Button>\n          </ListGroup.Item>\n          <ListGroup.Item style={{ margin: '20px' }}>\n            <h3 style={{ color: 'black' }}> Response Sheet:</h3>\n            <Button\n              variant=\"outline-primary\"\n              className=\"btn-block\"\n              onClick={() => downloadResponseSheet()}\n            >\n              Download\n            </Button>\n          </ListGroup.Item>\n        </>\n      )}\n\n      {result !== 'Not Attempt' && paper && paper.category !== 'PDF' && (\n        <Table\n          hover\n          bordered\n          striped\n          responsive\n          style={{ textAlign: 'center' }}\n        >\n          <thead>\n            <tr>\n              <th>SNo.</th>\n              <th>View Question</th>\n              <th>Correct Answer</th>\n              <th>Given Answer</th>\n              <th>Weightage</th>\n              <th>Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            {result &&\n              result.subResult.map((res, index) => (\n                <tr>\n                  <td>{index + 1}</td>\n                  <td>\n                    <Button\n                      variant=\"outline-primary\"\n                      className=\"Btn btn-block\"\n                      onClick={() => set(index)}\n                    >\n                      Details\n                    </Button>\n                  </td>\n                  <td>{res.correctAnswer.map(correct => correct)}</td>\n                  <td>\n                    {res.response.length\n                      ? res.response.map(r => r)\n                      : 'Not Attempt'}\n                  </td>\n                  <td>{res.weightage}</td>\n                  <td>\n                    {res.isCorrect ? (\n                      <i\n                        className=\"fas fa-check\"\n                        style={{ color: 'green' }}\n                      ></i>\n                    ) : (\n                      <i className=\"fa fa-times\" style={{ color: 'red' }}></i>\n                    )}\n                  </td>\n                </tr>\n              ))}\n          </tbody>\n        </Table>\n      )}\n\n      {questions && questions.length > 0 && (\n        <SingleQuestion\n          question={questions[pos]}\n          show={show}\n          setShow={setShow}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default StudentResult;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\EmailNotification.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\HomeScreen.jsx",["404","405"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport wallpaper from './macbook.jpg';\nimport { Col, Container, Row, Card } from 'react-bootstrap';\n\nconst HomeScreen = ({ history }) => {\n  const { userInfo } = useSelector(state => state.userLogin);\n  useEffect(() => {\n    if (!userInfo) {\n      // history.push(\"/login\");\n    }\n  }, []);\n\n  return (\n    <div className=\"bgcolor\">\n      <img src={wallpaper} style={{ width: '100%', height: '100vh' }} />\n      <div\n        style={{\n          position: 'absolute',\n          top: '300px',\n          left: '16px',\n          color: 'white',\n          fontSize: '4vw',\n        }}\n      >\n        ExamBit:\n        <br />\n        Online Examination System\n      </div>\n      <Container className=\"my-3 \">\n        <Row>\n          <Col>\n            <h2 style={{ color: 'black' }}>FEATURES</h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-microphone fa-3x\"></i>\n                  <br />\n                  <strong>Audio Proctoring</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>Record Audio around candidate during exam</Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-camera fa-3x\"></i>\n                  <br />\n                  <strong>Snapshots</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>Capture Images during exam</Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-file-download fa-3x\"></i>\n                  <br />\n                  <strong>Download Result</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>Download Result in excel format</Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-chart-bar fa-3x\"></i>\n                  <br />\n                  <strong>Graphical Form</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>Check Result in graphical format</Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-file-pdf fa-3x\"></i>\n                  <br />\n                  <strong>Pdf upload</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>\n                For Theory exam Candidate can upload Responsesheet in Pdf format\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-file fa-3x\"></i>\n                  <br />\n                  <strong>Assignment</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>\n                Supervisor can assign Assignment to students\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-users fa-3x\"></i>\n                  <br />\n                  <strong>Groups</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>\n                Supervisor can create group and students can join group\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-chart-line fa-3x\"></i>\n                  <br />\n                  <strong>Track Progress</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>Candidates can track their progress</Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-file-signature fa-3x\"></i>\n                  <br />\n                  <strong>Competitive Exam/Interview Test</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>\n                Candidate can register for the test by the registration link\n                provided by the Supervisor\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col sm={12} md={6} lg={4} xl={3}>\n            <Card className=\"my-3 p-3 rounded text-center\">\n              <Card.Header variant=\"dark\" style={{ color: 'black' }}>\n                <Card.Title as=\"div\">\n                  <i className=\"fas fa-check-square fa-3x\"></i>\n                  <br />\n                  <strong>Automatic Result Generate</strong>\n                </Card.Title>\n              </Card.Header>\n              <Card.Body>\n                After exam ends Result generate automatically{' '}\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default HomeScreen;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Audio.jsx",["406"],"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getAllAudioRec } from '../actions/audio';\n\nconst Audio = () => {\n  const query = new URLSearchParams(useLocation().search);\n  const testId = query.get('testId');\n  const studentId = query.get('studentId');\n  const [audio, setAudio] = useState([]);\n  useEffect(() => {\n    async function getAudioRec() {\n      const audioRec = await getAllAudioRec(testId, studentId);\n      setAudio(audioRec);\n    }\n    getAudioRec();\n  }, []);\n\n  return (\n    <div style={{ margin: '5px', textAlign: 'center' }}>\n      {audio &&\n        audio.map((i, j) => (\n          <div>\n            <audio controls=\"controls\" src={i} type=\"audio/webm\" key={j} />\n          </div>\n        ))}\n    </div>\n  );\n};\nexport default Audio;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestNotConductedList.jsx",["407"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Col, Button, Container } from 'react-bootstrap';\nimport { getNotConductedTestPaper } from '../actions/testAction';\n\nimport Loader from '../utils/Loader';\nimport TestTable from '../component/TestTable';\n\nconst TestNotConductedList = () => {\n  const { loading, notConductedTestPapers } = useSelector(\n    state => state.getTestPaper\n  );\n\n  const { userInfo } = useSelector(state => state.userLogin);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    }\n\n    if (!notConductedTestPapers) {\n      dispatch(getNotConductedTestPaper());\n    }\n  }, []);\n\n  //PAGINATION\n  const createHandler = () => {\n    history.push('/tests/create');\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col>\n            <h3 style={{ color: 'black' }}>All Tests</h3>\n          </Col>\n          <Col className=\"text-right py-2\">\n            <Button className=\"my-3\" onClick={createHandler}>\n              <i className=\"fas fa-plus\"></i>&nbsp;&nbsp;Create New Test\n            </Button>\n          </Col>\n        </Row>\n        <TestTable\n          testPapers={notConductedTestPapers}\n          isShow={true}\n          deleteEdit={true}\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default TestNotConductedList;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentUpcomingTest.jsx",["408","409"],"import React, { useEffect } from 'react';\nimport { Col, Container, Row, Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { studentTestPaperList } from '../actions/studentRegistrationAction';\nimport StudentTestTable from '../component/StudentGroupTestTable';\nimport Loader from '../utils/Loader';\n\nconst StudentUpcomingTest = () => {\n  const { loading, notGivenPaper } = useSelector(\n    state => state.studentTestList\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!notGivenPaper) dispatch(studentTestPaperList());\n  }, []);\n\n  return (\n    <Container>\n      {loading && <Loader />}\n      <Row className=\"align-items-center\">\n        <Col>\n          <h3 style={{ color: 'black' }}>Upcoming Test</h3>\n        </Col>\n        <Col className=\"text-right\">\n          <Button\n            variant=\"outline-primary\"\n            className=\"my-3\"\n            onClick={() => dispatch(studentTestPaperList())}\n          >\n            <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\n          </Button>\n        </Col>\n      </Row>\n      <StudentTestTable isShow={true} all={true} testPapers={notGivenPaper} />\n    </Container>\n  );\n};\n\nexport default StudentUpcomingTest;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\SupervisorGroup.jsx",["410"],"import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Col, Container, Form, Modal, Row } from 'react-bootstrap';\nimport { createGroup, getAllGroup } from '../actions/groupAction';\nimport { GROUP_LIST_SUCCESS } from '../constants/groupConstant';\nimport Group from '../component/Group';\nimport Loader from '../utils/Loader';\n\nconst SupervisorGroup = () => {\n  const [show, setShow] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [groupName, setGroupName] = useState('');\n  const [groupCode, setGroupCode] = useState('');\n\n  const { loading, groups } = useSelector(state => state.groupList);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!groups) dispatch(getAllGroup());\n  }, []);\n\n  const createHandler = async e => {\n    try {\n      e.preventDefault();\n      setLoader(true);\n      const group = await createGroup(groupName, groupCode);\n      if (group) {\n        setGroupName('');\n        setGroupCode('');\n        const arr = [...groups, group];\n        dispatch({ type: GROUP_LIST_SUCCESS, payload: arr });\n      }\n    } catch (ex) {}\n    setLoader(false);\n    setShow(false);\n  };\n\n  return (\n    <Container className=\"my-3\">\n      {loader && <Loader />}\n      {loading && <Loader />}\n      <Row>\n        <Col>\n          <h3 style={{ color: 'black' }}>GROUPS</h3>\n        </Col>\n        <Col style={{ textAlign: 'right' }}>\n          <Button variant=\"outline-primary\" onClick={() => setShow(true)}>\n            <i className=\"fas fa-plus\"></i> <i className=\"fa fa-users\"></i> New\n            Group\n          </Button>\n        </Col>\n      </Row>\n      <Row>\n        {groups &&\n          groups.map(group => (\n            <Col key={group._id} sm={12} md={6} lg={4} xl={3}>\n              <Group group={group} />\n            </Col>\n          ))}\n      </Row>\n      {show && (\n        <Modal\n          show={show}\n          onHide={() => setShow(false)}\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              Create Group\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form onSubmit={e => createHandler(e)}>\n              <Form.Group controlId=\"groupName\">\n                <Form.Label>Group Name</Form.Label>\n                <Form.Control\n                  required\n                  placeholder=\"Group Name\"\n                  type=\"text\"\n                  value={groupName}\n                  onChange={e => setGroupName(e.target.value)}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"groupCode\">\n                <Form.Label>Group Code</Form.Label>\n                <Form.Control\n                  required\n                  placeholder=\"Group Code\"\n                  minLength=\"6\"\n                  type=\"text\"\n                  value={groupCode}\n                  aria-describedby=\"code\"\n                  onChange={e => setGroupCode(e.target.value)}\n                />\n                <Form.Text id=\"code\" muted>\n                  code length must be greater than 5\n                </Form.Text>\n              </Form.Group>\n\n              <Button\n                className=\"btn-block\"\n                variant=\"outline-primary\"\n                type=\"submit\"\n              >\n                Create\n              </Button>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer></Modal.Footer>\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default SupervisorGroup;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentPrevTest.jsx",["411"],"import React, { useEffect } from 'react';\nimport { Col, Container, Row, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { studentTestPaperList } from '../actions/studentRegistrationAction';\nimport StudentTestTable from '../component/StudentGroupTestTable';\nimport Loader from '../utils/Loader';\n\nconst StudentPrevTest = () => {\n  const { loading, givenPaper } = useSelector(state => state.studentTestList);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!givenPaper) dispatch(studentTestPaperList());\n  }, []);\n\n  return (\n    <Container>\n      {loading && <Loader />}\n      <Row className=\"align-items-center\">\n        <Col>\n          <h3 style={{ color: 'black' }}>Previous Test</h3>\n        </Col>\n        <Col className=\"text-right\">\n          <Button\n            variant=\"outline-primary\"\n            className=\"my-3\"\n            onClick={() => dispatch(studentTestPaperList())}\n          >\n            <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\n          </Button>\n        </Col>\n      </Row>\n      <StudentTestTable isShow={false} all={true} testPapers={givenPaper} />\n    </Container>\n  );\n};\n\nexport default StudentPrevTest;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\Profile.jsx",["412","413","414"],"import React, { useEffect, useState } from 'react';\nimport { Container, ListGroup, Row, Col } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { getStudentRecord } from '../actions/studentRegistrationAction';\nimport LineChart from '../utils/LineChart';\n\nconst Profile = () => {\n  const [groupData, setGroupData] = useState([]);\n  const [groupLabel, setGroupLabel] = useState([]);\n  const [organisationData, setOrganisationData] = useState([]);\n  const [organisationLabel, setOrganisationLabel] = useState([]);\n\n  const { userInfo } = useSelector(state => state.userLogin);\n  const studentId = userInfo && userInfo._id;\n  useEffect(() => {\n    getRecord();\n  }, []);\n\n  const getRecord = async () => {\n    let studentRecord = await getStudentRecord(studentId);\n\n    studentRecord =\n      studentRecord && studentRecord.filter(st => st.testId !== null);\n    const groupRecord =\n      studentRecord &&\n      studentRecord.filter(s => s.testId.paperType === 'GROUP');\n    const organisationRecord =\n      studentRecord &&\n      studentRecord.filter(s => s.testId.paperType === 'ORGANISATION');\n\n    let data1 = [];\n    let label1 = [];\n\n    groupRecord.map(g => {\n      let percentage;\n      if (g.score === -1) percentage = 0;\n      else percentage = (g.score / g.testId.maxMarks) * 100;\n      data1.push(percentage);\n      label1.push(g.testId.startTime.substr(0, 10));\n    });\n\n    setGroupData(data1);\n    setGroupLabel(label1);\n\n    let data2 = [];\n    let label2 = [];\n\n    organisationRecord.map(o => {\n      let percentage;\n      if (o.score === -1) percentage = 0;\n      else percentage = (o.score / o.testId.maxMarks) * 100;\n      data2.push(percentage);\n      label2.push(o.testId.startTime.substr(0, 10));\n    });\n\n    setOrganisationData(data2);\n    setOrganisationLabel(label2);\n  };\n  return (\n    <Container className=\"my-3\">\n      <div className=\"shadow-lg p-3 mb-5 bg-white rounded\">\n        <p>USER PROFILE</p>\n        <Row>\n          <Col md={4}>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <strong>Name :</strong> {userInfo.name}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <strong>Email :</strong> {userInfo.email}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <strong>Category :</strong> {userInfo.category}\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n        </Row>\n        {userInfo.category === 'STUDENT' && (\n          <ListGroup>\n            <ListGroup.Item>\n              <p>Groups</p>\n              <LineChart\n                LineData={{\n                  labels: groupLabel,\n                  datasets: [\n                    {\n                      label: 'Percentage',\n                      data: groupData,\n                      fill: false,\n                      borderColor: '#742774',\n                      lineTension: 0,\n                      pointBorderWidth: 4,\n                    },\n                  ],\n                }}\n              />\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <p>Organisation</p>\n              <LineChart\n                LineData={{\n                  labels: organisationLabel,\n                  datasets: [\n                    {\n                      label: 'Percentage',\n                      data: organisationData,\n                      fill: false,\n                      borderColor: '#742774',\n                      lineTension: 0,\n                      pointBorderWidth: 4,\n                    },\n                  ],\n                }}\n              />\n            </ListGroup.Item>\n          </ListGroup>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\GroupDetails.jsx",["415"],"import React, { useState, useEffect } from 'react';\nimport { Container, Tabs, Tab, Button } from 'react-bootstrap';\nimport Tables from '../component/Tables';\nimport TestTable from '../component/TestTable';\nimport { getGroupTestPaper } from '../actions/groupAction';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport StudentTestTable from '../component/StudentGroupTestTable';\nimport Loader from '../utils/Loader';\n\nconst GroupDetails = () => {\n  const { id: groupId } = useParams();\n\n  const [conductedTestPaper, setConductedTestPaper] = useState([]);\n  const [notConductedTestPaper, setNotConductedTestPaper] = useState([]);\n  const [conductedAssignment, setConductedAssignment] = useState([]);\n  const [notConductedAssignment, setNotConductedAssignment] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  const { userInfo } = useSelector(state => state.userLogin);\n\n  const getTestPaper = async () => {\n    setLoader(true);\n    const paper = await getGroupTestPaper(groupId);\n\n    const paper1 = paper.filter(\n      p => !p.isTestConducted && p.paperType !== 'ASSIGNMENT'\n    );\n    const paper2 = paper.filter(\n      p => p.isTestConducted && p.paperType !== 'ASSIGNMENT'\n    );\n    const paper3 = paper.filter(\n      p => !p.isTestConducted && p.paperType === 'ASSIGNMENT'\n    );\n    const paper4 = paper.filter(\n      p => p.isTestConducted && p.paperType === 'ASSIGNMENT'\n    );\n\n    setNotConductedTestPaper(paper1);\n    setConductedTestPaper(paper2);\n    setNotConductedAssignment(paper3);\n    setConductedAssignment(paper4);\n\n    setLoader(false);\n  };\n\n  useEffect(() => {\n    getTestPaper();\n  }, []);\n\n  return (\n    <Container className=\"my-3\">\n      <div className=\"shadow-lg p-3 mb-5 bg-white rounded\">\n        <Tabs defaultActiveKey={'Members'}>\n          <Tab\n            eventKey=\"Members\"\n            title={<i className=\"fas fa-user\"> Members</i>}\n          >\n            <Tables />\n          </Tab>\n          <Tab\n            eventKey=\"upcoming test\"\n            title={<i className=\"fa fa-pencil\"> Upcoming Test</i>}\n          >\n            {notConductedTestPaper &&\n              (userInfo.category === 'SUPERVISOR' ? (\n                <TestTable\n                  testPapers={notConductedTestPaper}\n                  isShow={true}\n                  deleteEdit={false}\n                />\n              ) : (\n                <div className=\"my-1\">\n                  <Button\n                    variant=\"outline-primary\"\n                    className=\"my-3\"\n                    onClick={() => getTestPaper()}\n                  >\n                    <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Refresh\n                  </Button>\n                  {loader && <Loader />}\n                  <StudentTestTable\n                    testPapers={notConductedTestPaper}\n                    isShow={true}\n                    all={false}\n                  />\n                </div>\n              ))}\n          </Tab>\n\n          <Tab\n            eventKey=\"past test\"\n            title={<i className=\"fa fa-pencil\"> Past Test</i>}\n          >\n            {conductedTestPaper &&\n              (userInfo.category === 'SUPERVISOR' ? (\n                <TestTable\n                  testPapers={conductedTestPaper}\n                  isShow={false}\n                  deleteEdit={false}\n                />\n              ) : (\n                <div className=\"my-1\">\n                  <Button\n                    variant=\"outline-primary\"\n                    className=\"my-3\"\n                    onClick={() => getTestPaper()}\n                  >\n                    <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Refresh\n                  </Button>\n                  {loader && <Loader />}\n                  <StudentTestTable\n                    testPapers={conductedTestPaper}\n                    isShow={false}\n                    all={false}\n                  />\n                </div>\n              ))}\n          </Tab>\n          <Tab\n            eventKey=\"assigned assignment\"\n            title={<i className=\"fa fa-pencil\"> Assigned Assignment</i>}\n          >\n            {notConductedAssignment &&\n              (userInfo.category === 'SUPERVISOR' ? (\n                <TestTable\n                  testPapers={notConductedAssignment}\n                  isShow={true}\n                  deleteEdit={false}\n                  isAssignment={true}\n                />\n              ) : (\n                <div className=\"my-1\">\n                  <Button\n                    variant=\"outline-primary\"\n                    className=\"my-3\"\n                    onClick={() => getTestPaper()}\n                  >\n                    <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Refresh\n                  </Button>\n                  {loader && <Loader />}\n                  <StudentTestTable\n                    testPapers={notConductedAssignment}\n                    isShow={true}\n                    all={false}\n                  />\n                </div>\n              ))}\n          </Tab>\n          <Tab\n            eventKey=\"past assignment\"\n            title={<i className=\"fa fa-pencil\"> Past Assignment</i>}\n          >\n            {conductedAssignment &&\n              (userInfo.category === 'SUPERVISOR' ? (\n                <TestTable\n                  testPapers={conductedAssignment}\n                  isShow={false}\n                  deleteEdit={false}\n                  isAssignment={true}\n                />\n              ) : (\n                <div className=\"my-1\">\n                  <Button\n                    variant=\"outline-primary\"\n                    className=\"my-3\"\n                    onClick={() => getTestPaper()}\n                  >\n                    <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Refresh\n                  </Button>\n                  {loader && <Loader />}\n                  <StudentTestTable\n                    testPapers={conductedAssignment}\n                    isShow={false}\n                    all={false}\n                  />\n                </div>\n              ))}\n          </Tab>\n        </Tabs>\n      </div>\n    </Container>\n  );\n};\n\nexport default GroupDetails;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\TestSubmitted.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentGroup.jsx",["416"],"import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Col, Container, Form, Modal, Row } from 'react-bootstrap';\nimport { joinGroup, getAllGroup } from '../actions/groupAction';\nimport Group from '../component/Group';\nimport Loader from '../utils/Loader';\nimport { GROUP_LIST_SUCCESS } from '../constants/groupConstant';\n\nconst StudentGroup = () => {\n  const [show, setShow] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [groupCode, setGroupCode] = useState('');\n\n  const { loading, groups } = useSelector(state => state.groupList);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!groups) dispatch(getAllGroup());\n  }, []);\n\n  const joinGroupHandler = async e => {\n    try {\n      e.preventDefault();\n      setLoader(true);\n      const group = await joinGroup(groupCode);\n      if (group) {\n        setGroupCode('');\n\n        const arr = [...groups, group];\n        dispatch({ type: GROUP_LIST_SUCCESS, payload: arr });\n      }\n      setLoader(false);\n    } catch (ex) {}\n\n    setShow(false);\n  };\n\n  return (\n    <Container className=\"my-3\">\n      {loading && <Loader />}\n      {loader && <Loader />}\n      <Row>\n        <Col>\n          <h3 style={{ color: 'black' }}>GROUPS</h3>\n        </Col>\n        <Col style={{ textAlign: 'right' }}>\n          <Button variant=\"outline-primary\" onClick={() => setShow(true)}>\n            <i className=\"fas fa-plus\"></i> <i className=\"fa fa-users\"></i> Join\n            Group\n          </Button>\n        </Col>\n      </Row>\n      <Row>\n        {groups &&\n          groups.map(group => (\n            <Col key={group._id} sm={12} md={6} lg={4} xl={3}>\n              <Group group={group} />\n            </Col>\n          ))}\n      </Row>\n      {show && (\n        <Modal\n          show={show}\n          onHide={() => setShow(false)}\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              Create Group\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form onSubmit={e => joinGroupHandler(e)}>\n              <Form.Group controlId=\"groupCode\">\n                <Form.Label>Group Code</Form.Label>\n                <Form.Control\n                  required\n                  placeholder=\"Group Code\"\n                  minLength=\"6\"\n                  type=\"text\"\n                  value={groupCode}\n                  aria-describedby=\"code\"\n                  onChange={e => setGroupCode(e.target.value)}\n                />\n                <Form.Text id=\"code\" muted>\n                  code length must be greater than 5\n                </Form.Text>\n              </Form.Group>\n\n              <Button\n                className=\"btn-block\"\n                variant=\"outline-primary\"\n                type=\"submit\"\n              >\n                Join\n              </Button>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer></Modal.Footer>\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default StudentGroup;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\DeleteMedia.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentUpcomingAssignment.jsx",["417","418"],"import React, { useEffect } from 'react';\nimport { Col, Container, Row, Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { studentTestPaperList } from '../actions/studentRegistrationAction';\nimport StudentTestTable from '../component/StudentGroupTestTable';\nimport Loader from '../utils/Loader';\n\nconst StudentUpcomingAssignment = () => {\n  const { loading, notGivenAssignment } = useSelector(\n    state => state.studentTestList\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!notGivenAssignment) dispatch(studentTestPaperList());\n  }, []);\n\n  return (\n    <Container>\n      {loading && <Loader />}\n      <Row className=\"align-items-center\">\n        <Col>\n          <h3 style={{ color: 'black' }}>Assigned Assignment</h3>\n        </Col>\n        <Col className=\"text-right\">\n          <Button\n            variant=\"outline-primary\"\n            className=\"my-3\"\n            onClick={() => dispatch(studentTestPaperList())}\n          >\n            <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\n          </Button>\n        </Col>\n      </Row>\n      <StudentTestTable\n        isShow={true}\n        all={true}\n        testPapers={notGivenAssignment}\n      />\n    </Container>\n  );\n};\n\nexport default StudentUpcomingAssignment;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\AssignmentNotConducted.jsx",["419"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Col, Button, Container } from 'react-bootstrap';\n\nimport Loader from '../utils/Loader';\nimport TestTable from '../component/TestTable';\nimport { getNotConductedAssignment } from './../actions/testAction';\n\nconst AssignmentNotConductedList = () => {\n  const { loading, notConductedAssignment } = useSelector(\n    state => state.getTestPaper\n  );\n\n  const { userInfo } = useSelector(state => state.userLogin);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    }\n\n    if (!notConductedAssignment) {\n      dispatch(getNotConductedAssignment());\n    }\n  }, []);\n\n  //PAGINATION\n  const createHandler = () => {\n    history.push('/tests/create');\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col>\n            <h3 style={{ color: 'black' }}>All Assignments</h3>\n          </Col>\n          <Col className=\"text-right py-2\">\n            <Button className=\"my-3\" onClick={createHandler}>\n              <i className=\"fas fa-plus\"></i>&nbsp;&nbsp;Create New Assignment\n            </Button>\n          </Col>\n        </Row>\n        <TestTable\n          testPapers={notConductedAssignment}\n          isShow={true}\n          deleteEdit={true}\n          isAssignment={true}\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default AssignmentNotConductedList;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentPrevAssignment.jsx",["420"],"import React, { useEffect } from 'react';\nimport { Col, Container, Row, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { studentTestPaperList } from '../actions/studentRegistrationAction';\nimport StudentTestTable from '../component/StudentGroupTestTable';\nimport Loader from '../utils/Loader';\n\nconst StudentPrevAssignment = () => {\n  const { loading, givenAssignment } = useSelector(\n    state => state.studentTestList\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!givenAssignment) dispatch(studentTestPaperList());\n  }, []);\n\n  return (\n    <Container>\n      {loading && <Loader />}\n      <Row className=\"align-items-center\">\n        <Col>\n          <h3 style={{ color: 'black' }}>Previous Assignment</h3>\n        </Col>\n        <Col className=\"text-right\">\n          <Button\n            variant=\"outline-primary\"\n            className=\"my-3\"\n            onClick={() => dispatch(studentTestPaperList())}\n          >\n            <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\n          </Button>\n        </Col>\n      </Row>\n      <StudentTestTable\n        isShow={false}\n        all={true}\n        testPapers={givenAssignment}\n      />\n    </Container>\n  );\n};\n\nexport default StudentPrevAssignment;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\AssignmentConducted.jsx",["421"],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Row, Col, Button, Container } from \"react-bootstrap\";\nimport TestTable from \"../component/TestTable\";\nimport Loader from \"../utils/Loader\";\nimport { getConductedAssignment } from \"./../actions/testAction\";\n\nconst AssignmentConductedList = () => {\n  const { loading, conductedAssignment } = useSelector(\n    (state) => state.getTestPaper\n  );\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!conductedAssignment) {\n      dispatch(getConductedAssignment());\n    }\n  }, []);\n  return (\n    <>\n      {loading && <Loader />}\n      <Container>\n        <Row className=\"align-items-center\">\n          <Col>\n            <h3 style={{ color: \"black\" }}>All Assignments</h3>\n          </Col>\n          <Col className=\"text-right\">\n            <Button\n              onClick={() => dispatch(getConductedAssignment())}\n              className=\"my-3\"\n              variant=\"outline-primary\"\n            >\n              <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\n            </Button>\n          </Col>\n        </Row>\n        <TestTable testPapers={conductedAssignment} isShow={false} />\n      </Container>\n    </>\n  );\n};\n\nexport default AssignmentConductedList;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\testReducer.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\questionReducer.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\userReducer.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\groupReducer.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\studentRegistrationReducer.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\supervisorReducer.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\reducer\\generateResultReducer.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\QuestionsTable.jsx",["422"],"import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Table, Button, Modal, ListGroup } from 'react-bootstrap';\nimport { deleteQuestion } from '../actions/questionAction';\nimport { pageLength } from '../constants/pageConstant';\nimport { paginate } from '../utils/paginate';\nimport Paginations from '../utils/Pagination';\n\nconst QuestionsTable = ({ questions }) => {\n  const [show, setShow] = useState(false);\n  const [pos, setIndex] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(pageLength);\n\n  const count = questions && questions.length;\n  let ques = paginate(questions, currentPage, pageSize);\n\n  const [totalCount, setTotalCount] = useState(count);\n  const dispatch = useDispatch();\n\n  const deleteHandler = id => {\n    if (window.confirm('Are you sure ')) {\n      dispatch(deleteQuestion(questions, id));\n      setTotalCount(totalCount => totalCount - 1);\n      let currPage = Math.floor((totalCount - 1) / pageSize);\n      setCurrentPage(currPage);\n      ques = paginate(ques, currentPage, pageSize);\n    }\n  };\n\n  const set = index => {\n    setShow(true);\n    setIndex(index);\n  };\n\n  const handlePageChange = page => {\n    setCurrentPage(page);\n  };\n\n  return (\n    <>\n      <Table\n        hover\n        bordered\n        striped\n        responsive\n        className=\"table-lg table-centered\"\n      >\n        <thead>\n          <tr>\n            <th>SUBJECT</th>\n            <th>QUESTION</th>\n            <th>WEIGHTAGE</th>\n            <th>&nbsp;&nbsp;ACTION&nbsp;&nbsp;</th>\n          </tr>\n        </thead>\n        <tbody>\n          {ques &&\n            ques.map((question, index) => (\n              <tr key={question._id}>\n                <td>{question.subject}</td>\n                <td>{question.questionBody}</td>\n                <td>{question.weightage}</td>\n                <td>\n                  <Button\n                    variant=\"primary\"\n                    className=\"btn-sm\"\n                    onClick={() => set(index)}\n                  >\n                    <i className=\"fas fa-info-circle\"></i>\n                  </Button>\n                  &nbsp;\n                  <Button\n                    variant=\"primary\"\n                    className=\"btn-sm\"\n                    onClick={() => deleteHandler(question._id)}\n                  >\n                    <i className=\"fas fa-trash\"></i>\n                  </Button>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </Table>\n      <Paginations\n        itemsCount={count}\n        pageSize={pageSize}\n        currentPage={currentPage}\n        onPageChange={handlePageChange}\n      />\n      {ques && ques[pos] && (\n        <Modal\n          show={show}\n          onHide={() => setShow(false)}\n          dialogClassName=\"my-modal\"\n          aria-labelledby=\"example-custom-modal-styling-title\"\n        >\n          <Modal.Header closeButton style={{ textAlign: 'center' }}>\n            <Modal.Title id=\"example-custom-modal-styling-title\">\n              Question\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <strong>\n                  <b>SUBJECT</b>\n                </strong>{' '}\n                : {ques[pos].subject}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <strong>\n                  <b>WEIGHTAGE</b>\n                </strong>{' '}\n                : {ques[pos].weightage}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <strong>\n                  <b>QUESTION</b>\n                </strong>{' '}\n                : {ques[pos].questionBody}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <strong>\n                  <b>OPTIONS</b>\n                </strong>\n                <br></br>\n                {ques[pos].options.map((opt, index) => (\n                  <>\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                    <strong>{index + 1}</strong>: {opt.optionBody}\n                    <br></br>\n                  </>\n                ))}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <strong>\n                  <b>Answer:</b>{' '}\n                </strong>\n                {ques[pos].options.map((opt, index) => (\n                  <>\n                    {opt.isAnswer && (\n                      <>\n                        <strong key={index}>Option{index + 1}</strong>:{' '}\n                        {opt.optionBody}\n                        ,&nbsp;\n                      </>\n                    )}\n                  </>\n                ))}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <strong>\n                  <b>EXPLAINATION</b>\n                </strong>{' '}\n                : {ques[pos].explaination}\n              </ListGroup.Item>\n            </ListGroup>\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default QuestionsTable;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\TestTable.jsx",["423"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Table, Button, Container, Modal, Tab, Tabs } from \"react-bootstrap\";\nimport QuestionPaper from \"../component/QuestionPaper\";\nimport QuestionDetails from \"../component/QuestionDetails\";\nimport {\n  testBegin,\n  testEndByTeacher,\n  testPaperDelete,\n} from \"../actions/testAction\";\nimport { openRegistrationforTest } from \"../actions/studentRegistrationAction\";\nimport { paginate } from \"../utils/paginate\";\nimport { pageLength } from \"../constants/pageConstant\";\nimport Paginations from \"../utils/Pagination\";\nimport Statistics from \"../component/Statistics\";\nimport Trainees from \"../component/Trainees\";\nimport Timer from \"../utils/Timer\";\nimport RankList from \"./RankList\";\n\nconst TestTable = ({\n  testPapers,\n  isShow,\n  deleteEdit,\n  isAssignment = false,\n}) => {\n  const [show, setShow] = useState(false);\n  const [pos, setIndex] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(pageLength);\n\n  const count = testPapers ? testPapers.length : 0;\n\n  const dispatch = useDispatch();\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  let testPaperSheet = paginate(testPapers, currentPage, pageSize);\n\n  const [totalCount, setTotalCount] = useState(count);\n\n  const set = (index) => {\n    setShow(true);\n    setIndex(index);\n  };\n\n  const deleteHandler = (id) => {\n    if (window.confirm(\"Are you sure\")) {\n      dispatch(testPaperDelete(testPapers, id, isShow));\n      setTotalCount((totalCount) => totalCount - 1);\n      let currPage = Math.floor((totalCount - 1) / pageSize);\n      setCurrentPage(currPage);\n      testPaperSheet = paginate(testPapers, currentPage, pageSize);\n    }\n  };\n\n  const handleClick = (id, status) => {\n    status = status ? false : true;\n    dispatch(openRegistrationforTest({ testPapers, id, status }));\n  };\n\n  const endTest = (id, category = null) => {\n    dispatch(testEndByTeacher(testPaperSheet, id));\n\n    if (category === \"ASSIGNMENT\") history.push(`/assignment/conducted`);\n    else history.push(`/tests/conducted`);\n  };\n\n  const history = useHistory();\n  const editTestPaper = (index) => {\n    history.push(`/tests/edit/${testPaperSheet[index]._id}`);\n  };\n\n  return (\n    <>\n      <Container>\n        <Table hover bordered striped responsive className=\"table-centered\">\n          <thead>\n            <tr>\n              <th>SUBJECT</th>\n              <th>TITLE</th>\n              <th>DURATION(IN MIN)</th>\n              <th>CREATED AT</th>\n              {isShow && (\n                <>\n                  {!isAssignment && (\n                    <>\n                      <th>REGISTRATION</th>\n                    </>\n                  )}\n                  <th>START TEST</th>\n                  <th>TIME LEFT</th>\n                  {deleteEdit && <th>Edit Test</th>}\n                </>\n              )}\n              <th>&nbsp;&nbsp;ACTION&nbsp;&nbsp;</th>\n            </tr>\n          </thead>\n          <tbody>\n            {testPaperSheet &&\n              testPaperSheet.map((test, index) => (\n                <tr key={test._id} style={{ textAlign: \"center\" }}>\n                  <td>{test.subject}</td>\n                  <td>{test.title}</td>\n                  <td>{test.duration}</td>\n                  <td>{test.createdAt.substring(0, 10)}</td>\n                  {!test.isTestConducted && (\n                    <>\n                      {!isAssignment && (\n                        <>\n                          <td>\n                            {test.paperType === \"GROUP\" ||\n                            test.paperType === \"ASSIGNMENT\" ? (\n                              \"Not Required\"\n                            ) : (\n                              <Button\n                                variant=\"outline-primary\"\n                                className=\"btn btn-block\"\n                                disabled={\n                                  test.isTestBegins ||\n                                  test.paperType === \"GROUP\"\n                                }\n                                onClick={() =>\n                                  handleClick(\n                                    test._id,\n                                    test.isRegistrationAvailable\n                                  )\n                                }\n                              >\n                                {test.isRegistrationAvailable\n                                  ? \"Close\"\n                                  : \"Open\"}\n                              </Button>\n                            )}\n                          </td>\n                        </>\n                      )}\n                      <td>\n                        <Button\n                          variant=\"outline-primary\"\n                          className=\"btn btn-block\"\n                          disabled={test.isTestBegins}\n                          onClick={() =>\n                            dispatch(\n                              testBegin(\n                                test._id,\n                                pageSize * (currentPage - 1) + index,\n                                testPapers\n                              )\n                            )\n                          }\n                        >\n                          Start Test\n                        </Button>\n                      </td>\n\n                      <td>\n                        {test.isTestBegins\n                          ? !test.isTestConducted && (\n                              <Timer\n                                time={test.startTime}\n                                duration={test.duration}\n                                endTest={endTest}\n                                testId={test._id}\n                                paperType={test.paperType}\n                              />\n                            )\n                          : \"Not Started\"}\n                      </td>\n                      {deleteEdit && (\n                        <td>\n                          <Button\n                            variant=\"outline-primary\"\n                            className=\"btn-sm\"\n                            disabled={test.isTestBegins}\n                            onClick={() => editTestPaper(index)}\n                          >\n                            <i className=\"fas fa-edit\"></i>\n                          </Button>\n                        </td>\n                      )}\n                    </>\n                  )}\n\n                  <td>\n                    <Button\n                      variant=\"outline-primary\"\n                      className=\"btn-sm\"\n                      onClick={() => set(index)}\n                    >\n                      <i className=\"fas fa-info-circle\"></i>\n                    </Button>\n                    &nbsp;&nbsp;\n                    {deleteEdit && (\n                      <Button\n                        variant=\"outline-primary\"\n                        className=\"btn-sm\"\n                        onClick={() => deleteHandler(test._id)}\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </Button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n          </tbody>\n        </Table>\n        <Paginations\n          itemsCount={count}\n          pageSize={pageSize}\n          currentPage={currentPage}\n          onPageChange={handlePageChange}\n        />\n      </Container>\n      {testPaperSheet && testPaperSheet[pos] && (\n        <Modal\n          show={show}\n          onHide={() => setShow(false)}\n          dialogClassName=\"my-modal\"\n          aria-labelledby=\"example-custom-modal-styling-title\"\n        >\n          <Modal.Body>\n            <Tabs defaultActiveKey=\"details\">\n              <Tab\n                eventKey=\"details\"\n                title={<i className=\"fas fa-info-circle\"> Details</i>}\n              >\n                <QuestionDetails testPaperSheet={testPaperSheet} pos={pos} />\n              </Tab>\n              <Tab\n                eventKey=\"questions\"\n                title={<i className=\"fas fa-question-circle\"> Question</i>}\n              >\n                <QuestionPaper testPaperSheet={testPaperSheet} pos={pos} />\n              </Tab>\n              <Tab\n                eventKey=\"trainee\"\n                title={<i className=\"fas fa-user\"> Students</i>}\n              >\n                <Trainees id={testPaperSheet[pos]._id} />\n              </Tab>\n              <Tab\n                eventKey=\"statistics\"\n                disabled={!testPaperSheet[pos].isTestConducted}\n                title={<i className=\"fas fa-chart-bar\"> Statistics</i>}\n              >\n                <Statistics id={testPaperSheet[pos]._id} />\n              </Tab>\n              <Tab\n                eventKey=\"rankList\"\n                disabled={!testPaperSheet[pos].isTestConducted}\n                title={<i className=\"fa fa-trophy\"> RankList</i>}\n              >\n                <RankList testId={testPaperSheet[pos]._id} />\n              </Tab>\n            </Tabs>\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default TestTable;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\StudentGroupTestTable.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Tables.jsx",["424","425"],"//Student table in group\nimport React, { useEffect, useState } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport errorHandler from \"../errorHandler\";\nimport Loader from \"../utils/Loader\";\nimport { getGroupStudents } from \"../actions/groupAction\";\nimport { useSelector } from \"react-redux\";\n\nconst Tables = () => {\n  const [students, setStudents] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  const { id: groupId } = useParams();\n\n  const { userInfo } = useSelector((state) => state.userLogin);\n  useEffect(() => {\n    getStudents();\n  }, []);\n\n  const getStudents = async () => {\n    try {\n      setLoader(true);\n      const student = await getGroupStudents(groupId);\n      setStudents(student);\n      setLoader(false);\n    } catch (ex) {\n      errorHandler(ex);\n    }\n  };\n  return (\n    <>\n      <Button\n        variant=\"outline-primary\"\n        className=\"my-3\"\n        onClick={() => getStudents()}\n      >\n        <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\n      </Button>\n      {loader && <Loader />}\n      <Table hover bordered striped responsive className=\"table-centered\">\n        <thead>\n          <tr>\n            <th>S.No</th>\n            <th>Name</th>\n            <th>Email</th>\n          </tr>\n        </thead>\n        <tbody>\n          {students &&\n            students.map((stud, index) => (\n              <tr key={index}>\n                <td>{index + 1}</td>\n                <td>{stud.name}</td>\n                <td>{stud.email}</td>\n              </tr>\n            ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default Tables;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Group.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\userAction.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\studentRegistrationAction.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\questionAction.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\testAction.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\supervisorAction.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\groupAction.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\audio.jsx",["426"],"import http from '../utils/httpService';\nimport errorHandler from '../errorHandler';\nimport Token from '../utils/Token';\n\nexport const uploadAudio = async (testId, studentId, audioRecording) => {\n  try {\n    const { data } = await http.post(\n      '/api/audio/upload',\n      {\n        testId,\n        studentId,\n        audioRecording,\n      },\n      Token()\n    );\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n\nexport const getAllAudioRec = async (testId, studentId) => {\n  try {\n    const { data } = await http.post(\n      '/api/audio/get/all',\n      {\n        testId,\n        studentId,\n      },\n      Token()\n    );\n    return data;\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Timer.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\responseSheetAction.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\LineChart.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\SearchBox.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Loader.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\generateResultConstant.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\studentRegistrationConstant.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\supervisorConstant.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\groupConstant.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\testConstant.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\userConstanst.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\questionConstant.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\SingleQuestion.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\generateResultAction.jsx",["427"],"import * as gen_result from '../constants/generateResultConstant';\nimport http from '../utils/httpService';\nimport errorHandler from '../errorHandler';\nimport { toast } from 'react-toastify';\nimport Token from '../utils/Token';\n\nexport const resultGenerate = ({ testId, studentId }) => async dispatch => {\n  try {\n    dispatch({ type: gen_result.GENERATE_RESULT_REQUEST });\n\n    const { data } = await http.post(\n      '/api/result/generateresult',\n      {\n        testId,\n        studentId,\n      },\n      Token()\n    );\n\n    dispatch({ type: gen_result.GENERATE_RESULT_SUCCESS, payload: data });\n    toast.success('Result Generated');\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n\nexport const resultGeneratePdf = async (testId, studentId) => {\n  try {\n    const { data } = await http.post(\n      '/api/result/generateresult/pdf',\n      {\n        testId,\n        studentId,\n      },\n      Token()\n    );\n    //console.log(data);\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n\nexport const getScore = async testId => {\n  try {\n    const { data } = await http.post(\n      '/api/result/all/score',\n      {\n        testId,\n      },\n      Token()\n    );\n    return data;\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n\nexport const editResultScore = async (testId, studentId, score) => {\n  try {\n    const { data } = await http.post(\n      '/api/result/edit/score',\n      {\n        testId,\n        studentId,\n        score,\n      },\n      Token()\n    );\n    toast.success(data);\n    getRanksOfStudent();\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n\nexport const getRanksOfStudent = async testId => {\n  try {\n    const { data } = await http.post(\n      '/api/result/students/rank',\n      { testId },\n      Token()\n    );\n    return data;\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\actions\\snapshots.jsx",["428"],"import http from '../utils/httpService';\nimport errorHandler from '../errorHandler';\nimport Token from '../utils/Token';\n\nexport const uploadImage = async (testId, studentId, image) => {\n  try {\n    const { data } = await http.post(\n      '/api/snapshot/upload',\n      {\n        testId,\n        studentId,\n        image,\n      },\n      Token()\n    );\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n\nexport const getAllImages = async (testId, studentId) => {\n  try {\n    const { data } = await http.post(\n      '/api/snapshot/get/all',\n      {\n        testId,\n        studentId,\n      },\n      Token()\n    );\n\n    return data;\n  } catch (ex) {\n    errorHandler(ex);\n  }\n};\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\SupervisorTable.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\mediaConstant.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Clock.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\constants\\pageConstant.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\paginate.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Pagination.jsx",["429","430"],"import React from 'react';\nimport { Pagination } from 'react-bootstrap';\nimport _ from 'lodash';\n\nconst Paginations = ({ itemsCount, pageSize, currentPage, onPageChange }) => {\n  const pagesCount = Math.ceil(itemsCount / pageSize);\n  if (pagesCount === 1) return null;\n  const pages = _.range(1, pagesCount + 1);\n\n  return (\n    <nav>\n      <Pagination>\n        {pages.map(page => (\n          <div\n            className=\"mypost\"\n            key={page}\n            className={page === currentPage ? 'page-item active' : 'page-item'}\n          >\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\n              {page}\n            </a>\n          </div>\n        ))}\n      </Pagination>\n    </nav>\n  );\n};\n\nexport default Paginations;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\QuestionPaper.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\QuestionDetails.jsx",["431"],"import React from \"react\";\nimport { Col, ListGroup, Row } from \"react-bootstrap\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { toast } from \"react-toastify\";\n\nconst QuestionDetails = ({ testPaperSheet, pos }) => {\n  var link = window.location.href.split(\"/\").splice(0, 3);\n  var mainlink = \"\";\n  link.forEach((d) => {\n    mainlink = mainlink + d + \"/\";\n  });\n\n  return (\n    <ListGroup.Item>\n      <ListGroup.Item>\n        <Row>\n          <Col>\n            <strong>TEST CATEGORY </strong>\n          </Col>\n          <Col>{testPaperSheet[pos].paperType}</Col>\n        </Row>\n      </ListGroup.Item>\n      {testPaperSheet[pos].paperType === \"ORGANISATION\" && (\n        <ListGroup.Item>\n          <Row>\n            <Col md={5}>\n              <strong>\n                TEST Link &nbsp;{\" \"}\n                <CopyToClipboard\n                  text={`${mainlink}student/registration/test/${testPaperSheet[pos]._id}`}\n                  onCopy={() => toast.info(\"Link Copied to clipboard\")}\n                >\n                  <i className=\"fas fa-copy\"></i>\n                </CopyToClipboard>\n              </strong>\n            </Col>\n\n            <Col md={5}>\n              <a>{`${mainlink}student/registration/test/${testPaperSheet[pos]._id}`}</a>\n            </Col>\n          </Row>\n        </ListGroup.Item>\n      )}\n      <ListGroup.Item>\n        <Row>\n          <Col>\n            <strong>TEST NAME </strong>\n          </Col>\n          <Col>{testPaperSheet[pos].title}</Col>\n        </Row>\n      </ListGroup.Item>\n      <ListGroup.Item>\n        <Row>\n          <Col>\n            <strong>SUBJECT </strong>\n          </Col>\n          <Col>{testPaperSheet[pos].subject}</Col>\n        </Row>\n      </ListGroup.Item>\n      <ListGroup.Item>\n        <Row>\n          <Col>\n            <strong>DURATION </strong>\n          </Col>\n          <Col>{testPaperSheet[pos].duration}</Col>\n        </Row>\n      </ListGroup.Item>\n      <ListGroup.Item>\n        <Row>\n          <Col>\n            <strong>MAX MARKS</strong>\n          </Col>\n          <Col>{testPaperSheet[pos].maxMarks}</Col>\n        </Row>\n      </ListGroup.Item>\n    </ListGroup.Item>\n  );\n};\n\nexport default QuestionDetails;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Statistics.jsx",["432","433","434","435"],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ListGroup, Button, Col, Row } from 'react-bootstrap';\nimport { downloadResult } from '../actions/studentRegistrationAction';\nimport { getScoreOfAllStudents } from '../actions/testAction';\nimport BarCharts from '../utils/BarCharts';\nimport DoughnutChart from '../utils/DoughnutChart';\nimport download from 'downloadjs';\nimport { bgcolor, bordercolor } from '../utils/Color';\nimport { base64StringToBlob } from 'blob-util';\n\nconst Statistics = ({ id }) => {\n  const [scorelable, setScorelable] = useState([]);\n  const [scoredata, setScoredata] = useState([]);\n  const [bgColor, setbgColor1] = useState([]);\n  const [borColor, setborColor1] = useState([]);\n  const [passData, setPassData] = useState([0, 0]);\n  const [statData, setStatData] = useState([0, 0, 0, 0, 0, 0]);\n  const [totalStudents, setTotalStudents] = useState(0);\n\n  const { paper } = useSelector(state => state.singleTestPaper);\n  useEffect(() => {\n    if (paper) getStudentsMarks();\n  }, [paper]);\n\n  const getStudentsMarks = async () => {\n    const resultData = await getScoreOfAllStudents(id);\n    setTotalStudents(resultData.length);\n    if (resultData) {\n      let p = 0;\n      let f = 0;\n      let p90_100 = 0;\n      let p80_90 = 0;\n      let p70_80 = 0;\n      let p60_70 = 0;\n      let p50_60 = 0;\n      let below50 = 0;\n      var pc = 0;\n      var maxi = -1;\n      resultData.map((d, i) => {\n        pc = (d.score / paper.maxMarks) * 100;\n        if (pc >= 91) {\n          p90_100++;\n        } else if (pc >= 81) {\n          p80_90++;\n        } else if (pc >= 71) {\n          p70_80++;\n        } else if (pc >= 61) {\n          p60_70++;\n        } else if (pc >= 50) {\n          p50_60++;\n        } else {\n          below50++;\n        }\n\n        if (d.score >= d.maxMarks / 3) {\n          p++;\n        } else {\n          f++;\n        }\n\n        if (d.score > maxi) {\n          maxi = d.score;\n        }\n      });\n\n      var dp = [];\n      var label = [];\n      var bgColor1 = [];\n      var borcolor1 = [];\n\n      for (let i = 0; i <= maxi; i++) {\n        dp.push(0);\n        label.push(i);\n        bgColor1.push(bgcolor[i]);\n        borcolor1.push(bordercolor[i]);\n      }\n\n      resultData.map((d, i) => {\n        dp[d.score]++;\n      });\n\n      setScorelable(label);\n      setScoredata(dp);\n      setbgColor1(bgColor1);\n      setborColor1(borcolor1);\n      setPassData([f, p]);\n      setStatData([p90_100, p80_90, p70_80, p60_70, p50_60, below50]);\n    }\n  };\n\n  const downloadResultHandler = async id => {\n    const str = await downloadResult(id);\n    var blob = base64StringToBlob(\n      str,\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    );\n\n    download(\n      blob,\n      'Result.xlsx',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    );\n  };\n  return (\n    <>\n      <ListGroup variant=\"flush\">\n        <ListGroup.Item>\n          <Row>\n            <Col md={2}>\n              <Button\n                className=\"btn btn-block\"\n                variant=\"outline-danger\"\n                onClick={() => downloadResultHandler(id)}\n              >\n                Download\n              </Button>\n            </Col>\n            <Col md={10}>\n              <p style={{ fontSize: '20px' }}>\n                Dowload the test result excel sheet\n              </p>\n            </Col>\n          </Row>\n        </ListGroup.Item>\n        <ListGroup.Item>\n          <p>Score/No of Student</p>\n          Total No of students : {totalStudents}\n          <BarCharts\n            barData={{\n              labels: scorelable,\n              datasets: [\n                {\n                  label: 'Scores',\n                  data: scoredata,\n                  backgroundColor: bgColor,\n                  borderColor: borColor,\n                  borderWidth: 1,\n                },\n              ],\n            }}\n          />\n        </ListGroup.Item>\n        <ListGroup.Item>\n          <Row style={{ position: 'center' }}>\n            <Col>\n              <p>Percentage Wise Category</p>\n              <DoughnutChart\n                DoughnutData={{\n                  labels: [\n                    '91% to 100%',\n                    '81% to 90%',\n                    '71% to 80%',\n                    '61% to 70%',\n                    '50% to 60%',\n                    'Below 50%',\n                  ],\n                  datasets: [\n                    {\n                      label: 'Percentage wise category',\n                      data: statData,\n                      backgroundColor: [\n                        bgcolor[0],\n                        bgcolor[1],\n                        bgcolor[2],\n                        bgcolor[3],\n                        bgcolor[4],\n                        bgcolor[5],\n                      ],\n                      borderColor: [\n                        bordercolor[0],\n                        bordercolor[1],\n                        bordercolor[2],\n                        bordercolor[3],\n                        bordercolor[4],\n                        bordercolor[5],\n                      ],\n                      borderWidth: 1,\n                    },\n                  ],\n                }}\n              />\n            </Col>\n          </Row>\n        </ListGroup.Item>\n      </ListGroup>\n    </>\n  );\n};\n\nexport default Statistics;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\RankList.jsx",["436","437"],"import React, { useState, useEffect } from 'react';\nimport { Container, Table } from 'react-bootstrap';\nimport { getRanksOfStudent } from '../actions/generateResultAction';\n\nconst RankList = ({ testId }) => {\n  const [rank, setRank] = useState([]);\n  useEffect(() => {\n    async function getRanks() {\n      let list = await getRanksOfStudent(testId);\n\n      if (list.length !== 0) {\n        let rankList = [];\n        let j = 1;\n        let prev = list[0].score;\n        list[0].rank = j;\n        rankList.push(list[0]);\n\n        list = list.slice(1);\n        list.map(l => {\n          if (prev !== l.score) {\n            l.rank = ++j;\n            rankList.push(l);\n          } else {\n            l.rank = j;\n            rankList.push(l);\n          }\n\n          prev = l.score;\n        });\n        setRank(rankList);\n      }\n    }\n\n    getRanks();\n  }, []);\n  return (\n    <Container>\n      <Table responsive hover striped bordered className=\"table-centered my-3\">\n        <thead>\n          <tr>\n            <th>RANK</th>\n            <th>NAME</th>\n            <th>EMAIL</th>\n            <th>MARKS OBT.</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rank &&\n            rank.map((r, i) => (\n              <tr key={r.studentId._id}>\n                <td>{r.rank}</td>\n                <td>{r.studentId.name}</td>\n                <td>{r.studentId.email}</td>\n                <td>{r.score === -1 ? 'Not Checked' : r.score}</td>\n              </tr>\n            ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default RankList;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\component\\Trainees.jsx",["438","439","440"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Table, Modal, Form } from 'react-bootstrap';\nimport Loader from '../utils/Loader';\nimport { getAllRegisteredStudent } from '../actions/studentRegistrationAction';\nimport { getSinglePaper } from '../actions/testAction';\nimport download from 'downloadjs';\nimport { getResponsePdf } from './../actions/responseSheetAction';\nimport { editResultScore, getScore } from './../actions/generateResultAction';\nimport { toast } from 'react-toastify';\n\nconst Trainees = ({ id }) => {\n  const [show, setShow] = useState(false);\n  const [pos, setIndex] = useState(0);\n  const [marks, setMarks] = useState(0);\n  const dispatch = useDispatch();\n\n  const { loading, registeredStudent: students } = useSelector(\n    state => state.registeredStudentList\n  );\n  let { paper } = useSelector(state => state.singleTestPaper);\n  let { notConductedTestPapers, notConductedAssignment } = useSelector(\n    state => state.getTestPaper\n  );\n\n  const [scores, setScores] = useState([]);\n\n  let conductedPaper = null;\n  if (notConductedTestPapers)\n    conductedPaper = notConductedTestPapers && notConductedTestPapers;\n  else conductedPaper = notConductedAssignment;\n\n  useEffect(() => {\n    dispatch(getAllRegisteredStudent(id));\n    dispatch(getSinglePaper(id));\n\n    getAllScore();\n  }, []);\n  const getAllScore = async () => {\n    const score = await getScore(id);\n    setScores(score);\n  };\n\n  const resultWindowHandler = studentId => {\n    window.open(`/student/test/result?testId=${id}&studentId=${studentId}`);\n  };\n  const snapshotHandler = studentId => {\n    window.open(`/student/test/snapshots?testId=${id}&studentId=${studentId}`);\n  };\n  const audioHandler = studentId => {\n    window.open(`/student/test/audio?testId=${id}&studentId=${studentId}`);\n  };\n\n  const downloadPdf = async (studentId, studentName) => {\n    const pdf = await getResponsePdf(studentId, id);\n    if (pdf === 'Not Attempt' || pdf.length === 0) {\n      toast.error('Student has not attempt this test');\n    } else {\n      download(pdf, `${studentName}_responsesheet.pdf`, 'application/pdf');\n    }\n  };\n\n  const editScore = async studentId => {\n    //console.log(studentId);\n    await editResultScore(id, studentId, marks);\n    getAllScore();\n    setShow(false);\n  };\n  const set = index => {\n    setShow(true);\n    setIndex(index);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <Button\n        className=\"my-3\"\n        onClick={() => dispatch(getAllRegisteredStudent(id))}\n      >\n        <i className=\"fas fa-sync\"></i>&nbsp;&nbsp;Reload\n      </Button>\n      <Table\n        hover\n        bordered\n        striped\n        responsive\n        style={{ textAlign: 'center', marginTop: '10px' }}\n      >\n        <thead>\n          <tr>\n            <th>SNo.</th>\n            <th>STUDENT NAME</th>\n            <th>EMAIL ID</th>\n            {paper && paper.category === 'PDF' && (\n              <>\n                <th>Obtained Marks</th>\n                <th>Edit/Give Marks</th>\n                <th>Response Sheet</th>\n              </>\n            )}\n            {paper && paper.category === 'MCQ' && <th>PERFORMANCE</th>}\n\n            <th>SNAPSHOT</th>\n            <th>Audio Recording</th>\n          </tr>\n        </thead>\n        <tbody>\n          {students &&\n            students.map((stud, index) => (\n              <tr key={index + 1}>\n                <td>{index + 1}</td>\n                <td>{stud.name}</td>\n                <td>{stud.email}</td>\n                {paper && paper.category === 'PDF' && (\n                  <>\n                    <td>\n                      {scores.length === 0\n                        ? `Not Checked`\n                        : scores.map(result => {\n                            if (result.studentId === stud._id) {\n                              if (result.score === -1) {\n                                return `Not Checked`;\n                              } else {\n                                return `${result.score}`;\n                              }\n                            }\n                          })}\n                    </td>\n                    <td>\n                      <Button\n                        disabled={\n                          conductedPaper &&\n                          conductedPaper.map(\n                            p => p.id === id && !paper.isTestConducted\n                          )\n                        }\n                        variant=\"outline-danger\"\n                        onClick={() => set(index)}\n                      >\n                        Edit\n                      </Button>\n                    </td>\n                    <td>\n                      <Button\n                        disabled={\n                          conductedPaper &&\n                          conductedPaper.map(\n                            p => p.id === id && !paper.isTestConducted\n                          )\n                        }\n                        variant=\"outline-danger\"\n                        onClick={() => downloadPdf(stud._id, stud.name)}\n                      >\n                        Download\n                      </Button>\n                    </td>\n                  </>\n                )}\n                {paper && paper.category === 'MCQ' && (\n                  <td>\n                    <Button\n                      variant=\"outline-danger\"\n                      disabled={\n                        conductedPaper &&\n                        conductedPaper.filter(\n                          p => p._id === id && !p.isTestConducted\n                        ).length\n                          ? true\n                          : false\n                      }\n                      onClick={() => resultWindowHandler(stud._id)}\n                    >\n                      Result\n                    </Button>\n                  </td>\n                )}\n\n                <td>\n                  <Button\n                    variant=\"outline-danger\"\n                    disabled={\n                      conductedPaper &&\n                      conductedPaper.map(\n                        p => p._id === id && !p.isTestConducted\n                      )\n                    }\n                    onClick={() => snapshotHandler(stud._id)}\n                  >\n                    SnapShot\n                  </Button>\n                </td>\n                <td>\n                  <Button\n                    variant=\"outline-danger\"\n                    disabled={\n                      conductedPaper &&\n                      conductedPaper.map(\n                        p => p._id === id && !p.isTestConducted\n                      )\n                    }\n                    onClick={() => audioHandler(stud._id)}\n                  >\n                    Audio\n                  </Button>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </Table>\n      {students && students[pos] && (\n        <Modal\n          show={show}\n          onHide={() => setShow(false)}\n          dialogClassName=\"my-modal\"\n          aria-labelledby=\"example-custom-modal-styling-title\"\n        >\n          <Modal.Body>\n            <Form>\n              <Form.Group controlId=\"question\">\n                <Form.Label>Marks</Form.Label>\n                <Form.Control\n                  required\n                  placeholder=\"Enter Marks\"\n                  type=\"text\"\n                  value={marks}\n                  onChange={e => setMarks(e.target.value)}\n                />\n              </Form.Group>\n              <Button\n                variant=\"outline-primary\"\n                onClick={() => editScore(students[pos]._id)}\n              >\n                Submit\n              </Button>\n            </Form>\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Trainees;\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\errorHandler.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\httpService.jsx",["441"],"// import axios from \"axios\";\n\n// axios.interceptors.response.use(null, (error) => {\n//   const expectedError =\n//     error.response &&\n//     error.response.status >= 400 &&\n//     error.response.status < 500;\n//   if (!expectedError) {\n//     //console.log('Unexpected error occured!');\n//   }\n\n//   return Promise.reject(error);\n// });\n\n// export default {\n//   get: axios.get,\n//   post: axios.post,\n//   put: axios.put,\n//   delete: axios.delete,\n// };\n\nimport axios from \"axios\";\n\nconst backendUrl = process.env.REACT_APP_BACKEND_URL; // automatically picks .env\n\nconst instance = axios.create({\n  baseURL: backendUrl, // <-- all requests will prepend this\n});\n\naxios.interceptors.response.use(null, (error) => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n  if (!expectedError) {\n    //console.log('Unexpected error occured!');\n  }\n  return Promise.reject(error);\n});\n\nexport default {\n  get: (url, ...rest) => instance.get(url, ...rest),\n  post: (url, ...rest) => instance.post(url, ...rest),\n  put: (url, ...rest) => instance.put(url, ...rest),\n  delete: (url, ...rest) => instance.delete(url, ...rest),\n};\n","C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Token.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\Color.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\DoughnutChart.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\utils\\BarCharts.jsx",[],"C:\\Users\\anand\\Desktop\\XYZ\\Exam2\\ExamBit-master\\client\\src\\screen\\StudentPageList.jsx",[],{"ruleId":"442","replacedBy":"443"},{"ruleId":"444","replacedBy":"445"},{"ruleId":"446","severity":1,"message":"447","line":30,"column":6,"nodeType":"448","endLine":30,"endColumn":8,"suggestions":"449"},{"ruleId":"446","severity":1,"message":"450","line":20,"column":6,"nodeType":"448","endLine":20,"endColumn":25,"suggestions":"451"},{"ruleId":"446","severity":1,"message":"452","line":24,"column":6,"nodeType":"448","endLine":24,"endColumn":8,"suggestions":"453"},{"ruleId":"454","severity":1,"message":"455","line":43,"column":11,"nodeType":"456","messageId":"457","endLine":43,"endColumn":21},{"ruleId":"446","severity":1,"message":"458","line":74,"column":6,"nodeType":"448","endLine":74,"endColumn":8,"suggestions":"459"},{"ruleId":"446","severity":1,"message":"460","line":15,"column":6,"nodeType":"448","endLine":15,"endColumn":8,"suggestions":"461"},{"ruleId":"454","severity":1,"message":"462","line":13,"column":3,"nodeType":"456","messageId":"457","endLine":13,"endColumn":18},{"ruleId":"454","severity":1,"message":"463","line":34,"column":9,"nodeType":"456","messageId":"457","endLine":34,"endColumn":19},{"ruleId":"454","severity":1,"message":"464","line":36,"column":7,"nodeType":"456","messageId":"457","endLine":36,"endColumn":18},{"ruleId":"454","severity":1,"message":"465","line":50,"column":9,"nodeType":"456","messageId":"457","endLine":50,"endColumn":12},{"ruleId":"454","severity":1,"message":"466","line":51,"column":9,"nodeType":"456","messageId":"457","endLine":51,"endColumn":21},{"ruleId":"446","severity":1,"message":"467","line":79,"column":6,"nodeType":"448","endLine":79,"endColumn":8,"suggestions":"468"},{"ruleId":"446","severity":1,"message":"469","line":115,"column":6,"nodeType":"448","endLine":115,"endColumn":13,"suggestions":"470"},{"ruleId":"454","severity":1,"message":"471","line":173,"column":11,"nodeType":"456","messageId":"457","endLine":173,"endColumn":15},{"ruleId":"446","severity":1,"message":"460","line":16,"column":6,"nodeType":"448","endLine":16,"endColumn":8,"suggestions":"472"},{"ruleId":"446","severity":1,"message":"473","line":16,"column":6,"nodeType":"448","endLine":16,"endColumn":8,"suggestions":"474"},{"ruleId":"475","severity":1,"message":"476","line":20,"column":39,"nodeType":"477","endLine":20,"endColumn":62},{"ruleId":"446","severity":1,"message":"478","line":18,"column":6,"nodeType":"448","endLine":18,"endColumn":8,"suggestions":"479"},{"ruleId":"454","severity":1,"message":"480","line":21,"column":28,"nodeType":"456","messageId":"457","endLine":21,"endColumn":33},{"ruleId":"446","severity":1,"message":"481","line":35,"column":6,"nodeType":"448","endLine":35,"endColumn":8,"suggestions":"482"},{"ruleId":"446","severity":1,"message":"483","line":12,"column":6,"nodeType":"448","endLine":12,"endColumn":8,"suggestions":"484"},{"ruleId":"475","severity":1,"message":"476","line":16,"column":7,"nodeType":"477","endLine":16,"endColumn":73},{"ruleId":"446","severity":1,"message":"473","line":16,"column":6,"nodeType":"448","endLine":16,"endColumn":8,"suggestions":"485"},{"ruleId":"446","severity":1,"message":"486","line":27,"column":6,"nodeType":"448","endLine":27,"endColumn":8,"suggestions":"487"},{"ruleId":"454","severity":1,"message":"488","line":2,"column":31,"nodeType":"456","messageId":"457","endLine":2,"endColumn":36},{"ruleId":"446","severity":1,"message":"489","line":16,"column":6,"nodeType":"448","endLine":16,"endColumn":8,"suggestions":"490"},{"ruleId":"446","severity":1,"message":"491","line":20,"column":6,"nodeType":"448","endLine":20,"endColumn":8,"suggestions":"492"},{"ruleId":"446","severity":1,"message":"493","line":14,"column":6,"nodeType":"448","endLine":14,"endColumn":8,"suggestions":"494"},{"ruleId":"446","severity":1,"message":"495","line":17,"column":6,"nodeType":"448","endLine":17,"endColumn":8,"suggestions":"496"},{"ruleId":"497","severity":1,"message":"498","line":34,"column":23,"nodeType":"499","messageId":"500","endLine":34,"endColumn":25},{"ruleId":"497","severity":1,"message":"498","line":48,"column":30,"nodeType":"499","messageId":"500","endLine":48,"endColumn":32},{"ruleId":"446","severity":1,"message":"501","line":49,"column":6,"nodeType":"448","endLine":49,"endColumn":8,"suggestions":"502"},{"ruleId":"446","severity":1,"message":"491","line":19,"column":6,"nodeType":"448","endLine":19,"endColumn":8,"suggestions":"503"},{"ruleId":"454","severity":1,"message":"488","line":2,"column":31,"nodeType":"456","messageId":"457","endLine":2,"endColumn":36},{"ruleId":"446","severity":1,"message":"504","line":16,"column":6,"nodeType":"448","endLine":16,"endColumn":8,"suggestions":"505"},{"ruleId":"446","severity":1,"message":"506","line":27,"column":6,"nodeType":"448","endLine":27,"endColumn":8,"suggestions":"507"},{"ruleId":"446","severity":1,"message":"508","line":16,"column":6,"nodeType":"448","endLine":16,"endColumn":8,"suggestions":"509"},{"ruleId":"446","severity":1,"message":"510","line":18,"column":6,"nodeType":"448","endLine":18,"endColumn":8,"suggestions":"511"},{"ruleId":"454","severity":1,"message":"512","line":13,"column":20,"nodeType":"456","messageId":"457","endLine":13,"endColumn":31},{"ruleId":"454","severity":1,"message":"512","line":30,"column":20,"nodeType":"456","messageId":"457","endLine":30,"endColumn":31},{"ruleId":"454","severity":1,"message":"513","line":16,"column":11,"nodeType":"456","messageId":"457","endLine":16,"endColumn":19},{"ruleId":"446","severity":1,"message":"514","line":19,"column":6,"nodeType":"448","endLine":19,"endColumn":8,"suggestions":"515"},{"ruleId":"454","severity":1,"message":"516","line":7,"column":13,"nodeType":"456","messageId":"457","endLine":7,"endColumn":17},{"ruleId":"454","severity":1,"message":"516","line":29,"column":13,"nodeType":"456","messageId":"457","endLine":29,"endColumn":17},{"ruleId":"454","severity":1,"message":"516","line":7,"column":13,"nodeType":"456","messageId":"457","endLine":7,"endColumn":17},{"ruleId":"517","severity":1,"message":"518","line":17,"column":13,"nodeType":"519","messageId":"520","endLine":17,"endColumn":80},{"ruleId":"521","severity":1,"message":"522","line":19,"column":13,"nodeType":"477","endLine":19,"endColumn":73},{"ruleId":"521","severity":1,"message":"522","line":39,"column":15,"nodeType":"477","endLine":39,"endColumn":18},{"ruleId":"454","severity":1,"message":"523","line":17,"column":10,"nodeType":"456","messageId":"457","endLine":17,"endColumn":18},{"ruleId":"446","severity":1,"message":"524","line":24,"column":6,"nodeType":"448","endLine":24,"endColumn":13,"suggestions":"525"},{"ruleId":"497","severity":1,"message":"498","line":40,"column":29,"nodeType":"499","messageId":"500","endLine":40,"endColumn":31},{"ruleId":"497","severity":1,"message":"498","line":79,"column":29,"nodeType":"499","messageId":"500","endLine":79,"endColumn":31},{"ruleId":"497","severity":1,"message":"498","line":19,"column":20,"nodeType":"499","messageId":"500","endLine":19,"endColumn":22},{"ruleId":"446","severity":1,"message":"526","line":35,"column":6,"nodeType":"448","endLine":35,"endColumn":8,"suggestions":"527"},{"ruleId":"454","severity":1,"message":"528","line":1,"column":38,"nodeType":"456","messageId":"457","endLine":1,"endColumn":44},{"ruleId":"446","severity":1,"message":"529","line":38,"column":6,"nodeType":"448","endLine":38,"endColumn":8,"suggestions":"530"},{"ruleId":"497","severity":1,"message":"531","line":120,"column":45,"nodeType":"499","messageId":"532","endLine":120,"endColumn":47},{"ruleId":"533","severity":1,"message":"534","line":41,"column":1,"nodeType":"535","endLine":46,"endColumn":3},"no-native-reassign",["536"],"no-negated-in-lhs",["537"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'studentId', 'testId', and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["538"],"React Hook useEffect has a missing dependency: 'redirect'. Either include it or remove the dependency array.",["539"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'questions', and 'userInfo'. Either include them or remove the dependency array.",["540"],"no-unused-vars","'testPapers' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch', 'groups', 'questions', and 'testId'. Either include them or remove the dependency array.",["541"],"React Hook useEffect has missing dependencies: 'dispatch' and 'supervisors'. Either include them or remove the dependency array.",["542"],"'getTestCategory' is defined but never used.","'webcamRef2' is assigned a value but never used.","'intervalId2' is assigned a value but never used.","'pdf' is assigned a value but never used.","'testCategory' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'paper', 'studentId', and 'testId'. Either include them or remove the dependency array.",["543"],"React Hook useEffect has missing dependencies: 'checkCameraPerm', 'checkMicPerm', 'studentId', and 'testId'. Either include them or remove the dependency array.",["544"],"'temp' is assigned a value but never used.",["545"],"React Hook useEffect has missing dependencies: 'studentId' and 'testId'. Either include them or remove the dependency array.",["546"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'conductedTestPapers' and 'dispatch'. Either include them or remove the dependency array.",["547"],"'error' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'paper', 'result', 'student', 'studentId', and 'testId'. Either include them or remove the dependency array.",["548"],"React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["549"],["550"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'notConductedTestPapers', and 'userInfo'. Either include them or remove the dependency array.",["551"],"'Table' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'notGivenPaper'. Either include them or remove the dependency array.",["552"],"React Hook useEffect has missing dependencies: 'dispatch' and 'groups'. Either include them or remove the dependency array.",["553"],"React Hook useEffect has missing dependencies: 'dispatch' and 'givenPaper'. Either include them or remove the dependency array.",["554"],"React Hook useEffect has a missing dependency: 'getRecord'. Either include it or remove the dependency array.",["555"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'getTestPaper'. Either include it or remove the dependency array.",["556"],["557"],"React Hook useEffect has missing dependencies: 'dispatch' and 'notGivenAssignment'. Either include them or remove the dependency array.",["558"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'notConductedAssignment', and 'userInfo'. Either include them or remove the dependency array.",["559"],"React Hook useEffect has missing dependencies: 'dispatch' and 'givenAssignment'. Either include them or remove the dependency array.",["560"],"React Hook useEffect has missing dependencies: 'conductedAssignment' and 'dispatch'. Either include them or remove the dependency array.",["561"],"'setPageSize' is assigned a value but never used.","'userInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStudents'. Either include it or remove the dependency array.",["562"],"'data' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'passData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStudentsMarks'. Either include it or remove the dependency array.",["563"],"React Hook useEffect has a missing dependency: 'testId'. Either include it or remove the dependency array.",["564"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'getAllScore', and 'id'. Either include them or remove the dependency array.",["565"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"578","fix":"579"},{"desc":"574","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"581","fix":"589"},{"desc":"590","fix":"591"},{"desc":"592","fix":"593"},{"desc":"594","fix":"595"},{"desc":"596","fix":"597"},{"desc":"598","fix":"599"},{"desc":"600","fix":"601"},{"desc":"594","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},"Update the dependencies array to be: [history, studentId, testId, userInfo]",{"range":"619","text":"620"},"Update the dependencies array to be: [userInfo, history, redirect]",{"range":"621","text":"622"},"Update the dependencies array to be: [dispatch, history, questions, userInfo]",{"range":"623","text":"624"},"Update the dependencies array to be: [dispatch, groups, questions, testId]",{"range":"625","text":"626"},"Update the dependencies array to be: [dispatch, supervisors]",{"range":"627","text":"628"},"Update the dependencies array to be: [dispatch, paper, studentId, testId]",{"range":"629","text":"630"},"Update the dependencies array to be: [checkCameraPerm, checkMicPerm, paper, studentId, testId]",{"range":"631","text":"632"},{"range":"633","text":"628"},"Update the dependencies array to be: [studentId, testId]",{"range":"634","text":"635"},"Update the dependencies array to be: [conductedTestPapers, dispatch]",{"range":"636","text":"637"},"Update the dependencies array to be: [dispatch, paper, result, student, studentId, testId]",{"range":"638","text":"639"},"Update the dependencies array to be: [userInfo]",{"range":"640","text":"641"},{"range":"642","text":"635"},"Update the dependencies array to be: [dispatch, history, notConductedTestPapers, userInfo]",{"range":"643","text":"644"},"Update the dependencies array to be: [dispatch, notGivenPaper]",{"range":"645","text":"646"},"Update the dependencies array to be: [dispatch, groups]",{"range":"647","text":"648"},"Update the dependencies array to be: [dispatch, givenPaper]",{"range":"649","text":"650"},"Update the dependencies array to be: [getRecord]",{"range":"651","text":"652"},"Update the dependencies array to be: [getTestPaper]",{"range":"653","text":"654"},{"range":"655","text":"648"},"Update the dependencies array to be: [dispatch, notGivenAssignment]",{"range":"656","text":"657"},"Update the dependencies array to be: [dispatch, history, notConductedAssignment, userInfo]",{"range":"658","text":"659"},"Update the dependencies array to be: [dispatch, givenAssignment]",{"range":"660","text":"661"},"Update the dependencies array to be: [conductedAssignment, dispatch]",{"range":"662","text":"663"},"Update the dependencies array to be: [getStudents]",{"range":"664","text":"665"},"Update the dependencies array to be: [getStudentsMarks, paper]",{"range":"666","text":"667"},"Update the dependencies array to be: [testId]",{"range":"668","text":"669"},"Update the dependencies array to be: [dispatch, getAllScore, id]",{"range":"670","text":"671"},[974,976],"[history, studentId, testId, userInfo]",[689,708],"[userInfo, history, redirect]",[774,776],"[dispatch, history, questions, userInfo]",[2408,2410],"[dispatch, groups, questions, testId]",[493,495],"[dispatch, supervisors]",[2824,2826],"[dispatch, paper, studentId, testId]",[4036,4043],"[checkCameraPerm, checkMicPerm, paper, studentId, testId]",[512,514],[525,527],"[studentId, testId]",[577,579],"[conductedTestPapers, dispatch]",[1562,1564],"[dispatch, paper, result, student, studentId, testId]",[371,373],"[userInfo]",[532,534],[793,795],"[dispatch, history, notConductedTestPapers, userInfo]",[595,597],"[dispatch, notGivenPaper]",[789,791],"[dispatch, groups]",[570,572],"[dispatch, givenPaper]",[686,688],"[getRecord]",[1669,1671],"[getTestPaper]",[734,736],[611,613],"[dispatch, notGivenAssignment]",[803,805],"[dispatch, history, notConductedAssignment, userInfo]",[594,596],"[dispatch, givenAssignment]",[589,591],"[conductedAssignment, dispatch]",[624,626],"[getStudents]",[1057,1064],"[getStudentsMarks, paper]",[853,855],"[testId]",[1392,1394],"[dispatch, getAllScore, id]"]